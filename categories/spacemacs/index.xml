<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spacemacs on Modern Emacs</title>
    <link>https://ekaschalk.github.io/categories/spacemacs/</link>
    <description>Recent content in Spacemacs on Modern Emacs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Eric Kaschalk</copyright>
    <lastBuildDate>Fri, 14 Jul 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/spacemacs/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Migrating to Spacemacs Layers</title>
      <link>https://ekaschalk.github.io/post/migrate-layers/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/migrate-layers/</guid>
      <description>&lt;p&gt;Spacemacs is referred for its evil integration, space-based bindings, and
community contributed &lt;em&gt;layers&lt;/em&gt; that collect, configure, and integrate groups of
packages.&lt;/p&gt;

&lt;p&gt;For how much they add to Emacs, motivations for personal layers are largely
undocumented.&lt;/p&gt;

&lt;p&gt;I introduce layers then discuss benefits, approaches, and gotchas with
layer-based configurations.&lt;/p&gt;

&lt;p&gt;I&#39;ve migrated my entire &lt;code&gt;dotspacemacs/user-config&lt;/code&gt; into personal layers - now 6
lines vs 1,500.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d&#34; title=&#34;https://github.com/ekaschalk/.spacemacs.d&#34;&gt;https://github.com/ekaschalk/.spacemacs.d&lt;/a&gt; for my viewer-friendly configuration .&lt;/p&gt;

&lt;h1 id=&#34;introducing-layers&#34;&gt;Introducing Layers&lt;/h1&gt;

&lt;p&gt;This section is not a replacement for &lt;a href=&#34;http://spacemacs.org/doc/LAYERS.html&#34; title=&#34;http://spacemacs.org/doc/LAYERS.html&#34;&gt;http://spacemacs.org/doc/LAYERS.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Layers are directories containing up to 5 files and possibly additional
packages.&lt;/p&gt;

&lt;p&gt;In load order:&lt;/p&gt;

&lt;h3 id=&#34;layers-el&#34;&gt;Layers.el&lt;/h3&gt;

&lt;p&gt;Layer dependencies to load first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(configuration-layer/declare-layers &#39;(theming))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;packages-el&#34;&gt;packages.el&lt;/h3&gt;

&lt;p&gt;Packages added or configured by the layer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq my-layer-packages
      &#39;(a-pkg
        (github-pkg :location (recipe :fetcher github
                                      :repo &amp;quot;github-user/repo-name&amp;quot;))
        (my-pkg :location local)))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Owned Packages:&lt;/strong&gt; A layer owns a package if it defines &lt;code&gt;layer-name/init-pkg-name&lt;/code&gt;. All packages not defined in &lt;code&gt;dotspacemacs/additional/packages&lt;/code&gt; should have one and only one owner. It calls &lt;code&gt;use-package&lt;/code&gt;. Common options are &lt;code&gt;:init&lt;/code&gt; for before load config, &lt;code&gt;:config&lt;/code&gt; for after, &lt;code&gt;:if&lt;/code&gt; for loading if eg. a certain OS or executable is installed, &lt;code&gt;:after&lt;/code&gt; for enforcing load order, and &lt;code&gt;:defer t&lt;/code&gt; for deferred loading.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun display/init-pretty-outlines ()
  (use-package pretty-outlines
    :after outshine
    :config
    (progn
      (add-hook &#39;outline-mode-hook &#39;pretty-outline-set-display-table)
      (add-hook &#39;outline-minor-mode-hook &#39;pretty-outline-set-display-table)
      (add-hook &#39;emacs-lisp-mode-hook &#39;pretty-outline-add-bullets))))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unowned Packages:&lt;/strong&gt; A layer that does not own a package can configure it with &lt;code&gt;layer-name/pre-init-pkg-name&lt;/code&gt; and &lt;code&gt;layer-name/post-init-pkg-name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun config/pre-init-neotree ()
  (evil-global-set-key &#39;normal (kbd &amp;quot;M-p&amp;quot;)
                       &#39;neotree-find-project-root))

(defun config/post-init-neotree ()
  (setq neo-theme &#39;icons))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Local Packages:&lt;/strong&gt; Personal packages at &lt;code&gt;local/my-pkg/my-pkg.el&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;funcs-el&#34;&gt;funcs.el&lt;/h3&gt;

&lt;p&gt;Layer functions.&lt;/p&gt;

&lt;p&gt;Package agnostic functions belong here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defmacro with-face (STR &amp;amp;rest PROPS)
  &amp;quot;Return STR propertized with PROPS.&amp;quot;
  `(propertize ,STR &#39;face (list ,@PROPS)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Guarding against particular packages being installed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(when (configuration-layer/package-usedp &#39;some-pkg)
  (defun my-func ()))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;config-el&#34;&gt;config.el&lt;/h3&gt;

&lt;p&gt;Layer variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; python/config.el
(defvar python-tab-width 4
  &amp;quot;Tab width value for python buffers&amp;quot;)

;; init.el in dotspacemacs-configuration-layers
(python :variables python-tab-width 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configuration defined here will be loaded before the package init functions are
executed. Layer dependencies are actually loaded prior to config.el.&lt;/p&gt;

&lt;p&gt;This can be used for eg. setting theme updates with the &lt;code&gt;theming&lt;/code&gt; layer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq theming-modifications
      `((solarized-dark (avy-background-face :foreground &amp;quot;#586e75&amp;quot;)
                        (font-lock-doc-face :foreground &amp;quot;#2aa198&amp;quot;))
        (solarized-light ...)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;keybindings-el&#34;&gt;keybindings.el&lt;/h3&gt;

&lt;p&gt;Package-agnostic key-bindings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(global-set-key (kbd &amp;quot;M-d&amp;quot;) &#39;spacemacs/delete-window)

;; Evil will be loaded
(evil-define-key &#39;(normal visual motion) outline-minor-mode-map
  &amp;quot;gh&amp;quot; &#39;outline-up-heading)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;personal-layers&#34;&gt;Personal Layers&lt;/h1&gt;

&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;

&lt;p&gt;While any organization can be used, I recommend at most these 5 layers covering
common needs.&lt;/p&gt;

&lt;h3 id=&#34;a-macros-base-layer&#34;&gt;A Macros/Base Layer&lt;/h3&gt;

&lt;p&gt;A base layer that all personal layers inherit packages, macros, and common
functions from with &lt;code&gt;(configuration-layer/declare-layers &#39;(base))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I load &lt;code&gt;dash-functional&lt;/code&gt; and define &lt;code&gt;with-dir&lt;/code&gt;, &lt;code&gt;with-face&lt;/code&gt;, and other useful
utilities here.&lt;/p&gt;

&lt;h3 id=&#34;config&#34;&gt;Config&lt;/h3&gt;

&lt;p&gt;All packages and their configuration and key-bindings that don&#39;t fit into any
neat grouping.&lt;/p&gt;

&lt;p&gt;When any package&#39;s init gets large, consider a local package. I maintain my
org-mode setup separately in a local &lt;code&gt;org-config&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Anything, excluding spacemacs toggles, can be setup here. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq config-packages &#39;(evil ...))

(defun config/post-init-evil ()
  (setq evil-escape-key-sequence &amp;quot;jk&amp;quot;)
  (setq evil-escape-unordered-key-sequence &amp;quot;true&amp;quot;)
  (advice-add &#39;evil-ex-search-next :after &#39;config/scroll-to-center-advice)
  (advice-add &#39;evil-ex-search-previous :after &#39;config/scroll-to-center-advice))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recommend this layer own &lt;strong&gt;all additional packages&lt;/strong&gt; except themes, see gotchas.&lt;/p&gt;

&lt;h3 id=&#34;display&#34;&gt;Display&lt;/h3&gt;

&lt;p&gt;Theme updates and display packages like &lt;code&gt;spaceline-all-the-icons&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Due to how Spacemacs loads themes, I highly recommend declaring the
 &lt;code&gt;theming&lt;/code&gt; layer a dependency for theme updates. It is much more efficient should
you configure multiple themes, like light and dark versions, and as it is a
layer, it will be loaded prior to &lt;code&gt;config.el&lt;/code&gt; for proper code isolation.&lt;/p&gt;

&lt;p&gt;I integrate and configure my local pretty packages here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;pretty-code&lt;/em&gt; : Program with custom ligatures and symbols, see &lt;a href=&#39;https://ekaschalk.github.io/post/prettify-mode/&#39;&gt;mathematical notation in emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pretty-eshell&lt;/em&gt; : Customize eshell information and faces, see &lt;a href=&#39;https://ekaschalk.github.io/post/custom-eshell/&#39;&gt;making eshell your own&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pretty-fonts&lt;/em&gt; : All the icons and Fira Code ligature integration.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pretty-magit&lt;/em&gt; : Commit leaders, see &lt;a href=&#39;https://ekaschalk.github.io/post/pretty-magit/&#39;&gt;pretty magit - integrating commit leaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pretty-outlines&lt;/em&gt; : Fancy outline bullets and ellipsis, see &lt;a href=&#39;https://ekaschalk.github.io/post/outline-bullets/&#39;&gt;fancy outline bullets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;langs-optional&#34;&gt;Langs (optional)&lt;/h3&gt;

&lt;p&gt;I find it useful to separate programming language configuration out from the
config layer, though it is not necessary.&lt;/p&gt;

&lt;h3 id=&#34;personal-optional&#34;&gt;Personal (optional)&lt;/h3&gt;

&lt;p&gt;All personal packages that aren&#39;t display related I maintain in a single
personal layer. This is only relevant if you write your own packages.&lt;/p&gt;

&lt;p&gt;I setup my blogging and outline-jump packages here.&lt;/p&gt;

&lt;h2 id=&#34;your-init-el&#34;&gt;Your init.el&lt;/h2&gt;

&lt;p&gt;Layers must be declared in your &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; to take effect.&lt;/p&gt;

&lt;p&gt;I&#39;ve organized my layers into several sections:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defvar dotspacemacs/layers/local
  &#39;((macros :location local)
    (config :location local)
    (display :location local)
    (langs :location local)
    (personal :location local))
  &amp;quot;Local layers housed in &#39;~/.spacemacs.d/layers&#39;.&amp;quot;)

(defvar dotspacemacs/layers/core
  &#39;(better-defaults
    git
    org
    ...)
  &amp;quot;Layers I consider core to Spacemacs&amp;quot;)

(defvar dotspacemacs/layers/langs
  &#39;(emacs-lisp
    ...)
  &amp;quot;Programming and markup language layers&amp;quot;)

(defvar dotspacemacs/layers/extra
  &#39;(gnus
    graphviz
    ...)
  &amp;quot;Miscellaneous layers&amp;quot;)

(defun dotspacemacs/layers ()
  (setq-default dotspacemacs-configuration-layer-path &#39;(&amp;quot;~/.spacemacs.d/layers/&amp;quot;)
                dotspacemacs-configuration-layers
                (append dotspacemacs/layers/core
                        dotspacemacs/layers/langs
                        dotspacemacs/layers/extra
                        dotspacemacs/layers/local)
                ...))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gotchas&#34;&gt;Gotchas&lt;/h2&gt;

&lt;p&gt;Migrating was mostly painless. However when things go wrong you lose access to
your setup, an annoying development cycle. I encountered several Spacemacs
idiosyncrasies to be aware of when using layers to replace my user-config.&lt;/p&gt;

&lt;p&gt;Non-obvious errors to avoid:&lt;/p&gt;

&lt;h3 id=&#34;naming&#34;&gt;Naming&lt;/h3&gt;

&lt;p&gt;The naming scheme of &lt;code&gt;setq layer-name-packages&lt;/code&gt; and &lt;code&gt;defun layer-name/init-pkg-name&lt;/code&gt; is strict.
Beware when refactoring that you adjust the layer name accordingly. Failure to
do so will result in the package&#39;s configuration not being loaded or in the case
of ownership, not being installed, rather than a direct error.&lt;/p&gt;

&lt;h3 id=&#34;spacemacs-toggles&#34;&gt;Spacemacs toggles&lt;/h3&gt;

&lt;p&gt;Some toggles like &lt;code&gt;spacemacs/toggle-highlight-long-lines-globally-on&lt;/code&gt; do not
belong in any layer and should be defined in your user-config. Six toggles are
now all that compose my &lt;code&gt;dotspacemacs/user-config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This goes for some toggles not explicitly owned by Spacemacs - trying to setup
 &lt;code&gt;fringe-mode&lt;/code&gt; failed for me even in a &lt;code&gt;config/post-init-fringe&lt;/code&gt; block.&lt;/p&gt;

&lt;h3 id=&#34;os-configuration&#34;&gt;OS Configuration&lt;/h3&gt;

&lt;p&gt;I define &lt;code&gt;is-linuxp&lt;/code&gt; and a few other OS utilities that conditionally setup
 &lt;code&gt;dotspacemacs/init&lt;/code&gt; variables like font size. Layers load after these variables
are set, so the utilities cannot be moved to a layer. Set them at the top of
your &lt;code&gt;init.el&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;additional-themes&#34;&gt;Additional Themes&lt;/h3&gt;

&lt;p&gt;Spacemacs layers load ordering causes issues for extra themes. Theme packages
cannot be put in a layer. As a result, to use solarized I set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; ~/.spacemacs.d/init.el
(defun dotspacemacs/layers ()
  (setq-default dotspacemacs-additional-packages &#39;(solarized-theme)
                ...))
(defun dotspacemacs/init ()
  (setq-default dotspacemacs-themes &#39;(solarized-dark solarized-light)
                ...))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;spacemacs-core-layers&#34;&gt;Spacemacs Core Layers&lt;/h3&gt;

&lt;p&gt;Without doing a deep dive into Spacemacs core, you can expect the following
layers to always be loaded &lt;strong&gt;before all personal layers&lt;/strong&gt;. This is how
 &lt;code&gt;dash&lt;/code&gt; is always available and &lt;code&gt;evil-define-key&lt;/code&gt; can be used in keybindings
files.&lt;/p&gt;

&lt;p&gt;Call &lt;code&gt;g d&lt;/code&gt; or &lt;code&gt;(spacemacs/jump-to-definition)&lt;/code&gt; in emacs lisp mode to jump to
that layer&#39;s packages.el to check out its packages and configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(configuration-layer/declare-layers
 &#39;(spacemacs-base
   spacemacs-completion
   spacemacs-layouts
   spacemacs-editing
   spacemacs-editing-visual
   spacemacs-evil
   spacemacs-language
   spacemacs-misc
   spacemacs-modeline
   spacemacs-navigation
   spacemacs-org
   spacemacs-purpose
   spacemacs-visual))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These layers follow the same rules and principles as every other layer. If you
have the curiosity, these layers make Spacemacs what it is.&lt;/p&gt;

&lt;p&gt;Functionality provided here can be made use of by any layer, assuming those
packages and layers are not explicitly excluded.&lt;/p&gt;

&lt;h1 id=&#34;benefits&#34;&gt;Benefits&lt;/h1&gt;

&lt;p&gt;Those that value organization and robustness will find Spacemacs layers to
improve on other configuration management methods.&lt;/p&gt;

&lt;p&gt;Following Spacemacs conventions leads to predictable, friendly configurations.&lt;/p&gt;

&lt;p&gt;Once you&#39;ve become familiar with its conventions, there is no overhead.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
