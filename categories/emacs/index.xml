<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on Modern Emacs</title>
    <link>https://ekaschalk.github.io/categories/emacs/</link>
    <description>Recent content in Emacs on Modern Emacs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Eric Kaschalk</copyright>
    <lastBuildDate>Mon, 13 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ekaschalk.github.io/categories/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Emacs programs with Buttercup</title>
      <link>https://ekaschalk.github.io/post/testing-emacs/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/testing-emacs/</guid>
      <description>Buttercup is a testing framework for emacs-lisp. It is used by large projects like Clojure&#39;s CIDER to write clean, concise, and descriptive tests.
I introduce Buttercup and build up to advanced usages with the faint, unlikely dream that some Emacs programmer decides to add tests to their library...
What is Buttercup? Introduction Buttercup&#39;s entry points are: describe, it, and expect.
We describe a test suite with a name. Test cases within the possibly nested suites are done with it and assertions as expect blocks within.</description>
    </item>
    
    <item>
      <title>Pretty for loops</title>
      <link>https://ekaschalk.github.io/post/pretty-for-loops/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/pretty-for-loops/</guid>
      <description>This reddit post posed a fun challenge: display for(auto&amp;amp;&amp;amp; foo : bar){...} with mathematical notation.
In python this is trivial with prettify-symbols-mode as its syntax is simply for foo in bar:.
Turns out is possible... whether it is a good idea or not is still questionable.
How it works First we write a regex for the for-auto construct. Two groups are set, one for locating the for-all symbol and another for the in symbol.</description>
    </item>
    
    <item>
      <title>Advanced Syntax Highlighting - Variable Assignments</title>
      <link>https://ekaschalk.github.io/post/advanced-syntax/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/advanced-syntax/</guid>
      <description>Variable assignments in Emacs lisp are not highlighted.
That is, (setq foo bar) will not apply font-lock-variable-name-face to foo. This case is easy enough to implement via regex.
But in Emacs lisp, assignment is variadic, accepting alternating name-value pairs.
(setq foo bar foo (more stuff) foo bar)  How can we hope to highlight all the foo?
In this post I demonstrate syntax-traversing highlighting, as applied to variable assignments.
Plus and minus denote the name/value pairs.</description>
    </item>
    
    <item>
      <title>Deep diving into a major mode - Part 2 (IDE Features)</title>
      <link>https://ekaschalk.github.io/post/major-mode-part-2/</link>
      <pubDate>Sun, 29 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/major-mode-part-2/</guid>
      <description>In Part 1 I addressed: syntax tables, indentation, font locking, and context-sensitive syntax.
We now build out a &#34;Hyde&#34; with: shell/async process integration, Eldoc support, and Autocompletion. Also &#34;shift-K&#34; documentation lookup for the symbol-at-point.
Building Inferior Hy The basics The easiest way to add a REPL to your major-mode is through setting the variable inferior-lisp-program, possibly adding setup code through inferior-lisp-load-command, then running the inferior-lisp command.
;; within the define-derived-mode hy-mode setup.</description>
    </item>
    
    <item>
      <title>Solving ligature spacing in Emacs - proof of concept</title>
      <link>https://ekaschalk.github.io/post/lig-spacing/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/lig-spacing/</guid>
      <description>Ligatures are single-character replacements of strings. Examples of ligatures: replacing &#34;alpha&#34; with the alpha symbol and &#34;!=&#34; with the a slashed equal sign. See Coding with Mathematical Notation for details and pictures.
There is a serious flaw with ligatures - either the indentation you see with ligatures or without ligatures is correct, not both. So if someone that does not use ligatures works on your code, your indentation&#39;s will not match.</description>
    </item>
    
    <item>
      <title>Deep diving into a major mode - Part 1</title>
      <link>https://ekaschalk.github.io/post/major-mode-part-1/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/major-mode-part-1/</guid>
      <description>I&#39;ve taken up maintaining hy-mode - a major mode for lispy python.
I narrate working through specific problems in auto-completion, indentation, shell integration, and so on.
This post touches on: syntax, indentation, font-locking, and context-sensitive syntax.
All code snippets require the Emacs packages dash and s.
Syntax Tables The first step in a major mode is the syntax table.
In any major mode run describe-syntax to see its syntax table. As we are working with a lisp, we copy its syntax-table to start with.</description>
    </item>
    
    <item>
      <title>Migrating to Spacemacs Layers</title>
      <link>https://ekaschalk.github.io/post/migrate-layers/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/migrate-layers/</guid>
      <description>Spacemacs is referred for its evil integration, space-based bindings, and community contributed layers that collect, configure, and integrate groups of packages.
For how much they add to Emacs, motivations for personal layers are largely undocumented.
I introduce layers then discuss benefits, approaches, and gotchas with layer-based configurations.
I&#39;ve migrated my entire dotspacemacs/user-config into personal layers - now 6 lines vs 1,500.
See https://github.com/ekaschalk/.spacemacs.d for my viewer-friendly configuration .
Introducing Layers This section is not a replacement for http://spacemacs.</description>
    </item>
    
    <item>
      <title>Fancy Outline Bullets</title>
      <link>https://ekaschalk.github.io/post/outline-bullets/</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/outline-bullets/</guid>
      <description>We improve upon the outline bullets presented in the previous post Managing code with Outlines.
   My Headings Editing my config          This solution:
 Allows for face application to the bullet. The default faces outline-1/2/3... only apply to the text, not the bullet. Adds spaces for higher level bullets. So not every outline-level needs to have its text start at the same column.</description>
    </item>
    
    <item>
      <title>Managing code with Outlines</title>
      <link>https://ekaschalk.github.io/post/outline-ivy/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/outline-ivy/</guid>
      <description>I consider outlines an under-utilized yet killer feature of Emacs.
This post is split into two parts:
 Introducing and customizing outline-mode and outshine-mode. My package outline-ivy for jumping to outlines.  Intro to Outlines Background Outline-mode is a general framework for headers. Org-mode itself uses outline-mode.
Headers are demarcated by the current major-mode&#39;s comment syntax, typically with levels determined by the proceeding number of *.
 Python: # * is a level 1 header, # ** a level 2 header.</description>
    </item>
    
    <item>
      <title>Pretty Magit - Integrating commit leaders</title>
      <link>https://ekaschalk.github.io/post/pretty-magit/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/pretty-magit/</guid>
      <description>A comparison of how I see my commit logs and how they truly are:
        Typically this would be accomplished with Emacs font-lock-mode. However Magit is magic, even trivial uses of font-lock-add-keywords will break fontification for the entire buffer.
This post addresses adding faces to Magit to achieve in particular icon and colored commit leaders. I also integrate Ivy/Helm to prompt a leader when committing so you need not remember or type out completely every leader you choose.</description>
    </item>
    
    <item>
      <title>Making eshell your own</title>
      <link>https://ekaschalk.github.io/post/custom-eshell/</link>
      <pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/custom-eshell/</guid>
      <description>I have written utilities for choosing what information, icons, and faces your eshell prompt presents.
Example eshell prompts:
Eshell prompt customization takes place in eshell-prompt-function and eshell-prompt-regexp. The former determines the content of your prompt while the latter distinguishes your commands.
I define a macro esh-section taking a name, an icon, a form or variable to be evaluated, and optionally face properties. They create anonymous functions which will be evaluated and concatenated at prompt-time.</description>
    </item>
    
    <item>
      <title>Anonymous function macro in elisp</title>
      <link>https://ekaschalk.github.io/post/xi-macro/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/xi-macro/</guid>
      <description>Clojure has anonymous functions with the reader macro #(
(#(print %2 %1) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)  Emacs Lisp doesn&#39;t have reader macros, but we can take direction from Hylang, a lisp dialect similar to Clojure inter-oping with Python.
It implements the anonymous functions as the aptly named xi macro, where the lambda has arguments determined by presence of x1 ... xi .
((xi print x2 x1) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)  We can implement the xi macro in Emacs Lisp roughly as:</description>
    </item>
    
    <item>
      <title>An Emacs Blogging Workflow</title>
      <link>https://ekaschalk.github.io/post/org-mode-blogging/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/org-mode-blogging/</guid>
      <description>Hugo is a static site generator. It natively supports org-mode, builds fast, and has live reloading.
I have two repos for blog content and settings and hugo output.
I have defined some emacs lisp utilities to make interacting with Hugo easier.
deploy-blog will goto your blog content, run hugo, cleanup old html, and push the updates.
start-blog-server will run hugo server if not already running, and open the webpage in your browser.</description>
    </item>
    
    <item>
      <title>Unicode Python Infix Operators</title>
      <link>https://ekaschalk.github.io/post/python-infix/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/python-infix/</guid>
      <description>Custom infix operators can be emulated in Python using prettify-symbols-mode.
In your emacs config include:
(global-prettify-symbols-mode 1) (add-hook &#39;python-mode-hook (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist)) &#39;((&amp;quot;@compose@&amp;quot; . #X2218) (&amp;quot;@pipe@&amp;quot; . #Xe135)))))  Now pip install infix.
Optionally pip install toolz, a functional programming library, otherwise you can define the infix operations yourself.
import toolz.curried as tz from infix import custom_infix as infix @infix(&#39;__rmatmul__&#39;, &#39;__matmul__&#39;) def compose(a, b): return tz.</description>
    </item>
    
    <item>
      <title>Mathematical Notation in Emacs</title>
      <link>https://ekaschalk.github.io/post/prettify-mode/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/prettify-mode/</guid>
      <description>Sequences of characters are represented as a single token using:
 Pretty-mode Pretty-mode provides Greeks, subscripts, and more symbols. Prettify-symbols-mode Prettify Symbols ships with Emacs as of 24.4 and adds support for custom Unicode replacement of symbols. Ligatures Unicode replacements of common operators (see Fira Code, the font I use, and Pragmata Pro fonts)  Any combination of these tools may be chosen; Fira Code is not required to utilize prettify-symbols or pretty-mode.</description>
    </item>
    
  </channel>
</rss>