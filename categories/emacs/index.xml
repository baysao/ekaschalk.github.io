<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on Modern Emacs</title>
    <link>https://ekaschalk.github.io/categories/emacs/</link>
    <description>Recent content in Emacs on Modern Emacs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Eric Kaschalk</copyright>
    <lastBuildDate>Thu, 05 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/emacs/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Solving ligature spacing in Emacs - proof of concept</title>
      <link>https://ekaschalk.github.io/post/lig-spacing/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/lig-spacing/</guid>
      <description>&lt;p&gt;Ligatures are single-character replacements of strings. Examples of ligatures:
replacing &#34;alpha&#34; with the alpha symbol and &#34;!=&#34; with the a slashed equal sign.
See &lt;a href=&#39;https://ekaschalk.github.io/post/prettify-mode/&#39;&gt;Coding with Mathematical
Notation&lt;/a&gt; for details and pictures.&lt;/p&gt;

&lt;p&gt;There is a serious flaw with ligatures - either the indentation you see with
ligatures or without ligatures is correct, not both. So if someone that does not
use ligatures works on your code, your indentation&#39;s will not match. An example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; True indentation, what you want others to see
(alpha b
       c)

;; Emacs indentation, what you want to see when working
(a b
   c)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This problem significantly hampers ligature adoption.&lt;/p&gt;

&lt;p&gt;I do not believe any editor implements a solution to ligatures such that you see
the indentation you want to see, while the true indentation remains correct.&lt;/p&gt;

&lt;p&gt;I present a proof-of-concept solution to ligature spacing,&lt;/p&gt;

&lt;h1 id=&#34;how-emacs-displays-text&#34;&gt;How Emacs displays text&lt;/h1&gt;

&lt;p&gt;Emacs associates &lt;code&gt;text-properties&lt;/code&gt; with strings. A property can be anything.
Some property names are special and tell Emacs to handle the text in a
particular way, like &lt;code&gt;face&lt;/code&gt; for how a text is highlighted.&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;overlay&lt;/code&gt; has associated text-properties but is buffer-local. So when we move
that text to another buffer, if that overlay had a face, then that face would
not be carried over.&lt;/p&gt;

&lt;p&gt;Properties to be aware of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt; : How Emacs displays that region, can be any string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;invisible&lt;/code&gt; : Whether the text should be displayed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modification-hooks&lt;/code&gt; : When text in the overlay is edited, run these hooks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evaporate&lt;/code&gt; (overlays) : Once the overlay is &#34;done-with&#34;, delete the overlay.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;compose-region&#34;&gt;Compose region&lt;/h2&gt;

&lt;p&gt;Additionally, &lt;code&gt;compose-region&lt;/code&gt; is similar to &lt;code&gt;display&lt;/code&gt; in that the composed region
is displayed as (possibly many) characters. Current implementations of ligatures
all leverage compose-region by searching the buffer for say alpha and composing
from alphas beginning to end point the Unicode symbol for alpha.&lt;/p&gt;

&lt;p&gt;There are several important distinctions between &lt;code&gt;compose-region&lt;/code&gt; and &lt;code&gt;put-text-property &#39;display&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Indentation uses the composed character for indenting while the text-property&lt;/li&gt;
   display indents with the true, original string.
&lt;li&gt;Composition cannot be set for overlays. The internal &lt;code&gt;composition&lt;/code&gt; text property,&lt;/li&gt;
   unlike all other properties, cannot be put manually.
&lt;li&gt;Editing within a composed region will undo the composition while one must&lt;/li&gt;
   delete the whole region with the display property to undo the display.
&lt;/ol&gt;

&lt;h1 id=&#34;working-through-a-solution&#34;&gt;Working through a solution&lt;/h1&gt;

&lt;h2 id=&#34;to-compose-or-display-the-ligature&#34;&gt;To compose or display the ligature?&lt;/h2&gt;

&lt;p&gt;Because composition adjusts the underlying indentation, it cannot be used for a
ligature spacing solution. Indentation cannot be adjusted in a major-mode
agnostic manner. Indentation always considers the true number of characters
preceding the text on the line, so dynamically adding invisible spaces will not
work.&lt;/p&gt;

&lt;h2 id=&#34;but-how-to-make-editing-a-display-behave-like-a-composition&#34;&gt;But how to make editing a display behave like a composition?&lt;/h2&gt;

&lt;p&gt;It is a serious issue to have to delete the whole text for the ligature to
disappear.&lt;/p&gt;

&lt;p&gt;The solution is the &lt;code&gt;modification-hooks&lt;/code&gt; text-property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun lig-mod-hook (overlay post-mod? start end &amp;amp;optional _)
  (when post-mod?
    (overlay-put overlay &#39;display nil)
    (overlay-put overlay &#39;modification-hooks nil)))  ; force evaporation

(overlay-put lig-overlay &#39;modification-hooks &#39;(lig-mod-hook))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now editing text with the display property will behave as desired.&lt;/p&gt;

&lt;h2 id=&#34;so-how-to-visually-collapse-the-indentation&#34;&gt;So how to visually collapse the indentation?&lt;/h2&gt;

&lt;p&gt;We could set &lt;code&gt;invisible&lt;/code&gt; on the first 5 spaces of the line to collapse the
visual indentation by 5. But the invisible property will modify subsequent
line&#39;s indentation by 5 fewer (if necessary), an issue that cannot be resolved
as we cannot determine in general the &#34;if necessary&#34; part.&lt;/p&gt;

&lt;p&gt;The trick is to make the 5 first spaces display as one space. Because display
doesn&#39;t modify indentation, subsequent lines will be indented properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(overlay-put space-overlay &#39;display &amp;quot; &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-do-we-determine-the-indentation-we-want-to-see-then&#34;&gt;How do we determine the indentation we want to see then?&lt;/h2&gt;

&lt;p&gt;We let Emacs do the work - we create a mirror buffer where the ligatures are
actually composed and compare the differences in indentation.&lt;/p&gt;

&lt;p&gt;Overlays are not just buffer-local, they also do not transfer to indirect
buffers. Ideally we would have a hidden indirect buffer where we keep ligatures
composed instead. Unfortunately, since the &lt;code&gt;composition&lt;/code&gt; text property is
special, it can only be set with &lt;code&gt;compose-region&lt;/code&gt; which does not work for
overlays.&lt;/p&gt;

&lt;p&gt;Further, calculating indentation always adjusts the indentation. The
significance is that whenever we indent the indirect buffer, all the text will
move back-and-forth. So indirect buffers are out.&lt;/p&gt;

&lt;p&gt;Instead we create temporary buffers for the composition and retrieve an alist of
lines and their composed indentations.&lt;/p&gt;

&lt;h1 id=&#34;a-working-example&#34;&gt;A working example&lt;/h1&gt;

&lt;p&gt;The current ligature snippets floating around hack &lt;code&gt;font-locks&lt;/code&gt; to perform the
ligature substitutions. I recently became familiar with context-sensitive syntax
highlighting via the &lt;code&gt;syntax-propertize-function&lt;/code&gt; in my work on &lt;code&gt;hy-mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I develop a minimal major-mode &lt;code&gt;lig-mode&lt;/code&gt; that uses the syntax function to
implement ligatures.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;First we setup a basic major-mode for testing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(provide &#39;lig-mode)

(add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.lig\\&#39;&amp;quot; . lig-mode))

(define-derived-mode lig-mode fundamental-mode &amp;quot;Lig&amp;quot;
  (setq-local indent-line-function &#39;lisp-indent-line)
  (setq-local syntax-propertize-function &#39;lig-syntax-propertize-function))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a proof-of-concept - we implement spacing for a single ligature for now.
Lets replace &#34;hello&#34; with a smiley face.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun lig--match-lig (limit)
  (re-search-forward (rx word-start &amp;quot;hello&amp;quot; word-end) limit t))

(setq lig-char #x263a)
(setq lig-str &amp;quot;☺&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;determining-the-indents-we-want-to-see&#34;&gt;Determining the indents we want to see&lt;/h2&gt;

&lt;p&gt;We copy the buffer contents to a temporary buffer, search and compose the
symbols, indent the buffer, and copy the indentation for each line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defvar lig-diff-indents nil)

(defun lig-get-diff-indents ()
  (setq lig-diff-indents nil)
  (save-excursion
    ;; Compose the ligatures
    (goto-char (point-min))
    (while (re-search-forward (rx word-start &amp;quot;hello&amp;quot; word-end) nil t)
      (compose-region (match-beginning 0) (match-end 0) lig-char))

    ;; Change indent to match the composed symbol
    (indent-region (point-min) (point-max))

    ;; Build an alist of line and indention column
    (goto-char (point-min))
    (setq line 1)
    (while (&amp;lt; (point) (point-max))
      (push (cons line (current-indentation))
            lig-diff-indents)
      (forward-line)
      (setq line (1+ line)))))

(defun run-lig-get-diff-indents ()
  (let ((true-buffer (current-buffer)))
    (with-temp-buffer
      (fundamental-mode)
      (setq-local indent-line-function &#39;lisp-indent-line)
      (insert-buffer-substring-no-properties true-buffer)
      (lig-get-diff-indents))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bringing-it-together&#34;&gt;Bringing it together&lt;/h2&gt;

&lt;p&gt;For details on how &lt;code&gt;syntax-propertize-function&lt;/code&gt; works, &lt;a href=&#39;https://ekaschalk.github.io/post/major-mode-part-1/&#39;&gt;check this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whenever we edit the buffer this hook will run, recalculating and visually
collapsing all the leading spaces as needed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun lig-syntax-propertize-function (start-limit end-limit)
  ;; Make sure visual indentations are current
  (run-lig-get-diff-indents)

  (save-excursion
    (goto-char (point-min))

    (while (lig--match-lig end-limit)
      (let ((start (match-beginning 0))
            (end (match-end 0)))
        (unless (-contains? (overlays-at start) lig-overlay)
          ;; Create and set the lig overlays if not already set
          (setq lig-overlay (make-overlay start end))
          (overlay-put lig-overlay &#39;display lig-str)
          (overlay-put lig-overlay &#39;evaporate t)
          (overlay-put lig-overlay &#39;modification-hooks &#39;(lig-mod-hook)))))

    ;; Remove all spacing overlays from buffer
    (remove-overlays nil nil &#39;invis-spaces t)

    ;; Recalcualte and add all spacing overlays
    (goto-char (point-min))
    (setq line 1)

    (while (&amp;lt; (point) (point-max))
      ;; Don&#39;t add the spacing overlay until we indent
      (unless (&amp;gt; (+ (current-indentation) (point))
                 (point-max))
        (let* ((vis-indent (alist-get line lig-diff-indents))
               (num-spaces (- (current-indentation) vis-indent))
               (start (point))
               (end (+ num-spaces (point))))

         ;; only add invisible spaces if the indentations differ
         (unless (&amp;lt;= num-spaces 1)
            (setq space-overlay (make-overlay start end))
            (overlay-put space-overlay &#39;invis-spaces t)
            (overlay-put space-overlay &#39;display &amp;quot; &amp;quot;)
            (overlay-put space-overlay &#39;evaporate t))

         (setq line (1+ line))
         (forward-line))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;the-result&#34;&gt;The result&lt;/h1&gt;

&lt;p&gt;Enable &lt;code&gt;lig-mode&lt;/code&gt; to see:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; The true text
(hello how
       are
       you (hello hi
                  again))

;; What we see
(☺ how
   are
   you (☺ hi
         again))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The indentation we see is not the true indentation anymore!&lt;/p&gt;

&lt;p&gt;The full and current code is &lt;a href=&#34;https://github.com/ekaschalk/emacs-ligatures&#34; title=&#34;hosted here&#34;&gt;hosted here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The missing space on the second hello is a bug. There are many issues with this
implementation - this is a proof of concept. I suspect a completely correct
solution to be still some time and effort away, if only because this approach is
incredibly inefficient.&lt;/p&gt;

&lt;p&gt;This post shows that we maybe can have our cake and eat it too in regards to
ligatures.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep diving into a major mode - Part 1</title>
      <link>https://ekaschalk.github.io/post/major-mode-part-1/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/major-mode-part-1/</guid>
      <description>&lt;p&gt;I&#39;ve taken up maintaining &lt;a href=&#34;https://github.com/hylang/hy-mode&#34; title=&#34;hy-mode&#34;&gt;hy-mode&lt;/a&gt; - a major mode for &lt;a href=&#34;https://github.com/hylang/hy&#34; title=&#34;lispy python&#34;&gt;lispy python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I narrate working through specific problems in auto-completion, indentation,
shell integration, and so on.&lt;/p&gt;

&lt;p&gt;This post touches on: syntax, indentation, font-locking, and context-sensitive
syntax.&lt;/p&gt;

&lt;p&gt;All code snippets require the Emacs packages &lt;code&gt;dash&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;syntax-tables&#34;&gt;Syntax Tables&lt;/h1&gt;

&lt;p&gt;The first step in a major mode is the syntax table.&lt;/p&gt;

&lt;p&gt;In any major mode run &lt;code&gt;describe-syntax&lt;/code&gt; to see its syntax table. As we are
  working with a lisp, we copy its syntax-table to start with.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defconst hy-mode-syntax-table
  (-let [table
         (copy-syntax-table lisp-mode-syntax-table)]
    ;; syntax modifications...
    table)
  &amp;quot;Hy modes syntax table.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax table isn&#39;t set explicitly, its name identifies and sets it for hy-mode.&lt;/p&gt;

&lt;p&gt;Configuration is performed with &lt;code&gt;modify-syntax-entry&lt;/code&gt;, its docstring provides
  all the syntactic constructs we can pick from.&lt;/p&gt;

&lt;p&gt;A subset to be familiar with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;( ) : &lt;code&gt;open/close parenthesis&lt;/code&gt;. These are for all bracket-like constructs such&lt;/li&gt;
    as [ ] or { }. The first character should be the syntactic construct, namely
    &#34;(&#34; or &#34;)&#34;, and the second character should be the closing delimiter.
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(modify-syntax-entry ?\{ &amp;quot;(}&amp;quot; table)
(modify-syntax-entry ?\} &amp;quot;){&amp;quot; table)
(modify-syntax-entry ?\[ &amp;quot;(]&amp;quot; table)
(modify-syntax-entry ?\] &amp;quot;)[&amp;quot; table)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&#39; : &lt;code&gt;prefix character&lt;/code&gt;. Prefixes a symbol/word.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; Quote characters are prefixes
(modify-syntax-entry ?\~ &amp;quot;&#39;&amp;quot; table)
(modify-syntax-entry ?\@ &amp;quot;&#39;&amp;quot; table)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;_ and w : &lt;code&gt;symbol and word constituent&lt;/code&gt; respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; &amp;quot;,&amp;quot; is a symbol in Hy, namely the tuple constructor
(modify-syntax-entry ?\, &amp;quot;_ p&amp;quot; table)

;; &amp;quot;|&amp;quot; is a symbol in hy, naming the or operator
(modify-syntax-entry ?\| &amp;quot;_ p&amp;quot; table)

;; &amp;quot;#&amp;quot; is a tag macro, we include # in the symbol
(modify-syntax-entry ?\# &amp;quot;_ p&amp;quot; table)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;| : &lt;code&gt;generic string fence&lt;/code&gt;. A more general string quote syntactic construct.&lt;/li&gt;
    Used for delimiting multi-line strings like with triple quotes in Python. I go
    into depth on this construct in the &#34;context-sensitive syntax&#34; section.
&lt;/ul&gt;

&lt;h1 id=&#34;indentation&#34;&gt;Indentation&lt;/h1&gt;

&lt;p&gt;Look through &lt;code&gt;calculate-lisp-indent&lt;/code&gt;, the indentation workhorse of &lt;code&gt;lisp-mode&lt;/code&gt; derivatives,
  and it is quickly seen that indentation is &lt;em&gt;hard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Indentation is set with &lt;code&gt;indent-line-function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the case of a lisp, we actually do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq-local indent-line-function &#39;lisp-indent-line)
(setq-local lisp-indent-function &#39;hy-indent-function)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the real work is performed by &lt;code&gt;calculate-lisp-indent&lt;/code&gt; that makes calls
  to &lt;code&gt;lisp-indent-function&lt;/code&gt;, accepting an &lt;code&gt;indent-point&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The function at heart is &lt;code&gt;parse-partial-sexp&lt;/code&gt;, taking limiting points and
  retrieving a 10 element list describing the syntax at the point.&lt;/p&gt;

&lt;p&gt;As this is a (necessarily) excessive amount of information, I recommend as
  many other modes have done - define some aliases. I have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun hy--sexp-inermost-char (state) (nth 1 state))
(defun hy--start-of-last-sexp (state) (nth 2 state))
(defun hy--in-string? (state) (nth 3 state))
(defun hy--start-of-string (state) (nth 8 state))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observe you can also omit &lt;code&gt;state&lt;/code&gt; and call &lt;code&gt;syntax-ppss&lt;/code&gt; to get state which runs
  &lt;code&gt;parse-partial-sexp&lt;/code&gt; from point-min to current point, with the caveat that the
  2nd and 6th state aren&#39;t reliable. I prefer to pass the state manually.&lt;/p&gt;

&lt;p&gt;These are the building blocks for indentation - we can then write utilities
  to better get our head around indentation like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun hy--prior-sexp? (state)
  (number-or-marker-p (hy--start-of-last-sexp state)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-indent-function&#34;&gt;The indent function&lt;/h2&gt;

&lt;p&gt;The three cases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; Normal Indent
(normal b
        c)
(normal
  b c)

;; Special Forms
(special b
  c)

;; List-likes
[a b
 c]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hy&#39;s current indent function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun hy-indent-function (indent-point state)
  &amp;quot;Indent at INDENT-POINT where STATE is `parse-partial-sexp&#39; for INDENT-POINT.&amp;quot;
  (goto-char (hy--sexp-inermost-char state))

  (if (hy--not-function-form-p)
      (1+ (current-column))  ; Indent after [, {, ... is always 1
    (forward-char 1)  ; Move to start of sexp

    (cond ((hy--check-non-symbol-sexp (point))  ; Comma tuple constructor
           (+ 2 (current-column)))

          ((hy--find-indent-spec state)  ; Special form uses fixed indendation
           (1+ (current-column)))

          (t
           (hy--normal-indent calculate-lisp-indent-last-sexp)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we indent we jump to the sexp&#39;s innermost char, ie. &#34;(&#34;, &#34;[&#34;, &#34;{&#34;, etc..&lt;/p&gt;

&lt;p&gt;If that character is a list-like, then we 1+ it and are done.&lt;/p&gt;

&lt;p&gt;Otherwise we move to the start of the sexp and investigate if
    &lt;code&gt;(thing-at-point &#39;symbol)&lt;/code&gt;. If it is, then we check a list of special forms
    like &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;defn&lt;/code&gt; for a match. If we found a (possibly fuzzy) match,
    then regardless of whether the first line contains args or not, we indent
    the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun hy--normal-indent (last-sexp)
  &amp;quot;Determine normal indentation column of LAST-SEXP.

Example:
 (a (b c d
       e
       f))

1. Indent e =&amp;gt; start at d -&amp;gt; c -&amp;gt; b.
Then backwards-sexp will throw error trying to jump to a.
Observe &#39;a&#39; need not be on the same line as the ( will cause a match.
Then we determine indentation based on whether there is an arg or not.

2. Indenting f will go to e.
Now since there is a prior sexp d but we have no sexps-before on same line,
the loop will terminate without error and the prior lines indentation is it.&amp;quot;
  (goto-char last-sexp)
  (-let [last-sexp-start nil]
    (if (ignore-errors
          (while (hy--anything-before? (point))
            (setq last-sexp-start (prog1
                                      ;; Indentation should ignore quote chars
                                      (if (-contains? &#39;(?\&#39; ?\` ?\~)
                                                      (char-before))
                                          (1- (point))
                                        (point))
                                    (backward-sexp))))
          t)
        (current-column)
      (if (not (hy--anything-after? last-sexp-start))
          (1+ (current-column))
        (goto-char last-sexp-start)  ; Align with function argument
        (current-column)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Normal indent does the most work. To notice, if we are on the next line
    without a function arg above, then &lt;code&gt;last-sexp-start&lt;/code&gt; will be nil as
    &lt;code&gt;backward-sexp&lt;/code&gt; will throw an error and the &lt;code&gt;setq&lt;/code&gt; won&#39;t go off.&lt;/p&gt;

&lt;p&gt;If there is a function call above, then the &lt;code&gt;current-column&lt;/code&gt; of the
    innermost, non-opening sexp, will end up as the indent point.&lt;/p&gt;

&lt;p&gt;If we indent the line of the funcall, it will jump to the containing sexp
    and calculate its indent.&lt;/p&gt;

&lt;p&gt;Other indentation functions are a bit more advanced in that they track the
    number of prior sexps in the indent-function to distinguish between eg. the
    then and else clause of an if statement. Those cases use the same
    fundamentals that are seen here.&lt;/p&gt;

&lt;p&gt;Developing indentation from scratch can be challenging. The approach I took
    was to look at clojure&#39;s indentation and trim it down until it fit this
    language. I&#39;ve removed most of the extraneous details that it adds to handle
    special rules for eg. &lt;code&gt;clojure.spec&lt;/code&gt; but it is still possible that I could
    trim this further.&lt;/p&gt;

&lt;h1 id=&#34;font-locks-and-highlighting&#34;&gt;Font Locks and Highlighting&lt;/h1&gt;

&lt;p&gt;Two symbols are the entry points to be aware of into font locking:
  &lt;code&gt;hy-font-lock-kwds&lt;/code&gt; and &lt;code&gt;hy-font-lock-syntactic-face-function&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq font-lock-defaults
        &#39;(hy-font-lock-kwds
          nil nil
          ((&amp;quot;+-*/.&amp;lt;&amp;gt;=!?$%_&amp;amp;~^:@&amp;quot; . &amp;quot;w&amp;quot;))  ; syntax alist
          nil
          (font-lock-mark-block-function . mark-defun)
          (font-lock-syntactic-face-function  ; Differentiates (doc)strings
           . hy-font-lock-syntactic-face-function)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;font-lock-keywords&#34;&gt;Font lock keywords&lt;/h2&gt;

&lt;p&gt;There exists many posts on modifying the variable &lt;code&gt;font-lock-keywords&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The approach taken in &lt;code&gt;hy-mode&lt;/code&gt; is to separate out the language by category:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defconst hy--kwds-constants
  &#39;(&amp;quot;True&amp;quot; &amp;quot;False&amp;quot; &amp;quot;None&amp;quot; &amp;quot;Ellipsis&amp;quot; &amp;quot;NotImplemented&amp;quot;)
  &amp;quot;Hy constant keywords.&amp;quot;)

(defconst hy--kwds-defs
  &#39;(&amp;quot;defn&amp;quot; &amp;quot;defun&amp;quot;
    &amp;quot;defmacro&amp;quot; &amp;quot;defmacro/g!&amp;quot; &amp;quot;defmacro!&amp;quot;
    &amp;quot;defreader&amp;quot; &amp;quot;defsharp&amp;quot; &amp;quot;deftag&amp;quot;)
  &amp;quot;Hy definition keywords.&amp;quot;)

(defconst hy--kwds-operators
  &#39;(&amp;quot;!=&amp;quot; &amp;quot;%&amp;quot; &amp;quot;%=&amp;quot; &amp;quot;&amp;amp;&amp;quot; &amp;quot;&amp;amp;=&amp;quot; &amp;quot;*&amp;quot; &amp;quot;**&amp;quot; &amp;quot;**=&amp;quot; &amp;quot;*=&amp;quot; &amp;quot;+&amp;quot; &amp;quot;+=&amp;quot; &amp;quot;,&amp;quot; &amp;quot;-&amp;quot;
    &amp;quot;-=&amp;quot; &amp;quot;/&amp;quot; &amp;quot;//&amp;quot; &amp;quot;//=&amp;quot; &amp;quot;/=&amp;quot; &amp;quot;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;&amp;quot; &amp;quot;&amp;lt;&amp;lt;=&amp;quot; &amp;quot;&amp;lt;=&amp;quot; &amp;quot;=&amp;quot; &amp;quot;&amp;gt;&amp;quot; &amp;quot;&amp;gt;=&amp;quot; &amp;quot;&amp;gt;&amp;gt;&amp;quot; &amp;quot;&amp;gt;&amp;gt;=&amp;quot;
    &amp;quot;^&amp;quot; &amp;quot;^=&amp;quot; &amp;quot;|&amp;quot; &amp;quot;|=&amp;quot; &amp;quot;~&amp;quot;)
  &amp;quot;Hy operator keywords.&amp;quot;)

;; and so on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then use the amazing &lt;code&gt;rx&lt;/code&gt; macro for constructing the regexes.&lt;/p&gt;

&lt;p&gt;Now due to &lt;code&gt;rx&lt;/code&gt; being a macro and its internals, in order to use variable
    definitions in the regex construction we have to call &lt;code&gt;rx-to-string&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;The simplest definition:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defconst hy--font-lock-kwds-constants
  (list
   (rx-to-string
    `(: (or ,@hy--kwds-constants)))

   &#39;(0 font-lock-constant-face))

  &amp;quot;Hy constant keywords.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A more complex example with multiple groups taking different faces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defconst hy--font-lock-kwds-defs
  (list
   (rx-to-string
    `(: (group-n 1 (or ,@hy--kwds-defs))
        (1+ space)
        (group-n 2 (1+ word))))

   &#39;(1 font-lock-keyword-face)
   &#39;(2 font-lock-function-name-face nil t))

  &amp;quot;Hy definition keywords.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course not all highlighting constructs are determined by symbol name. We
    can highlight the shebang line for instance as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defconst hy--font-lock-kwds-shebang
  (list
   (rx buffer-start &amp;quot;#!&amp;quot; (0+ not-newline) eol)

   &#39;(0 font-lock-comment-face))

  &amp;quot;Hy shebang line.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then collect all our nice and modular font locks as &lt;code&gt;hy-font-lock-kwds&lt;/code&gt; that we set earlier:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defconst hy-font-lock-kwds
  (list hy--font-lock-kwds-constants
        hy--font-lock-kwds-defs
        ;; lots more ...
        hy--font-lock-kwds-shebang)

  &amp;quot;All Hy font lock keywords.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;syntactic-face-function&#34;&gt;Syntactic face function&lt;/h2&gt;

&lt;p&gt;This function is typically used for distinguishing between string,
   docstrings, and comments. It does not need to be set unless you want to
   distinguish docstrings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun hy--string-in-doc-position? (state)
  &amp;quot;Is STATE within a docstring?&amp;quot;
  (if (= 1 (hy--start-of-string state))  ; Identify module docstring
      t
    (-when-let* ((first-sexp (hy--sexp-inermost-char state))
                 (function (save-excursion
                             (goto-char (1+ first-sexp))
                             (thing-at-point &#39;symbol))))
      (s-matches? (rx &amp;quot;def&amp;quot; (not blank)) function))))  ; &amp;quot;def&amp;quot;==&amp;quot;setv&amp;quot;

(defun hy-font-lock-syntactic-face-function (state)
  &amp;quot;Return syntactic face function for the position represented by STATE.
STATE is a `parse-partial-sexp&#39; state, and the returned function is the
Lisp font lock syntactic face function. String is shorthand for either
a string or comment.&amp;quot;
  (if (hy--in-string? state)
      (if (hy--string-in-doc-position? state)
          font-lock-doc-face
        font-lock-string-face)
    font-lock-comment-face))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is rather straightforward - we start out within either a string or
    comment. If needed, we jump to the first sexp and see if it is a &#34;def-like&#34;
    symbol, in which case we know its a doc.&lt;/p&gt;

&lt;p&gt;This implementation isn&#39;t perfect as any string with a parent def-sexp will
    use the doc-face, so if your function returns a raw string, then it will be
    highlighted as if its a doc.&lt;/p&gt;

&lt;h1 id=&#34;context-sensitive-syntax&#34;&gt;Context sensitive syntax&lt;/h1&gt;

&lt;p&gt;An advanced feature Emacs enables is context-sensitive syntax. Some examples
  are multi-line python strings, where there must be three single quotes
  together, or haskell&#39;s multiline comments.&lt;/p&gt;

&lt;p&gt;Hy implements multiline string literals for automatically escaping quote
  characters. The syntax is &lt;code&gt;#[optional-delim[the-string]optional-delim]&lt;/code&gt; where
  the string can span lines.&lt;/p&gt;

&lt;p&gt;In order to identify and treat the bracket as a string, we look to setting the
  &lt;code&gt;syntax-propertize-function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It takes two arguments, the start and end points with which to search through.
  &lt;code&gt;syntax.el&lt;/code&gt; handles the internals of limiting and passing the start and end
  and applying/removing the text properties as the construct changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun hy--match-bracket-string (limit)
  &amp;quot;Search forward for a bracket string literal.&amp;quot;
  (re-search-forward
   (rx &amp;quot;#[&amp;quot;
       (0+ not-newline)
       &amp;quot;[&amp;quot;
       (group (1+ (not (any &amp;quot;]&amp;quot;))))
       &amp;quot;]&amp;quot;
       (0+ not-newline)
       &amp;quot;]&amp;quot;)
   limit
   t))

(defun hy-syntax-propertize-function (start end)
  &amp;quot;Implements context sensitive syntax.&amp;quot;
  (save-excursion
    (goto-char start)

    ;; Start goes to current line, need to go to char-before the #[ block
    (when (nth 1 (syntax-ppss))
      (goto-char (- (hy--sexp-inermost-char (syntax-ppss)) 2)))

    (while (hy--match-bracket-string end)
      (put-text-property (1- (match-beginning 1)) (match-beginning 1)
                         &#39;syntax-table (string-to-syntax &amp;quot;|&amp;quot;))

      (put-text-property (match-end 1) (1+ (match-end 1))
                         &#39;syntax-table (string-to-syntax &amp;quot;|&amp;quot;)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We go to the start and jump before its innermost containing sexp begins minus
  two for the hash sign and bracket characters.&lt;/p&gt;

&lt;p&gt;If the regex matches a bracket string, we then set the innermost brackets on
  both sides to have the &lt;code&gt;string-fence&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;When the syntax is set - &lt;code&gt;parse-partial-sexp&lt;/code&gt; and in particular font lock mode
  and &lt;code&gt;indent-line&lt;/code&gt; will now recognize that block as a string - so proper
  indentation and highlighting follow immediately. And when we modify the
  brackets, the string-fence syntax is removed and behaves as expected.&lt;/p&gt;

&lt;p&gt;This function can handle any kind of difficult syntactic constructs. For
  instance, I could modify it to only work if the delimiters on both side of the
  bracket string are the same. I could also associate some arbitrary, custom
  text property that other parts of hy-mode interact with.&lt;/p&gt;

&lt;p&gt;Note that there is the macro &lt;code&gt;syntax-propertize-rules&lt;/code&gt; for automating the
  searching and &lt;code&gt;put-text-property&lt;/code&gt; portions. I prefer to do the searching and
  application manually to 1. have more flexibility and 2. step through the trace
  easier.&lt;/p&gt;

&lt;h1 id=&#34;closing&#34;&gt;Closing&lt;/h1&gt;

&lt;p&gt;Building a major mode teaches a lot about how Emacs works. I&#39;m sure I&#39;ve made
  errors, but so far this has been enough to get &lt;code&gt;hy-mode&lt;/code&gt; up and running. The
  difference in productivity in Hy I&#39;ve enjoyed since taking maintainer-ship has
  made the exercise more than worth it.&lt;/p&gt;

&lt;p&gt;I also have auto-completion and shell/process integration working which I&#39;ll
  touch on in future posts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating to Spacemacs Layers</title>
      <link>https://ekaschalk.github.io/post/migrate-layers/</link>
      <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/migrate-layers/</guid>
      <description>&lt;p&gt;Spacemacs is referred for its evil integration, space-based bindings, and
community contributed &lt;em&gt;layers&lt;/em&gt; that collect, configure, and integrate groups of
packages.&lt;/p&gt;

&lt;p&gt;For how much they add to Emacs, motivations for personal layers are largely
undocumented.&lt;/p&gt;

&lt;p&gt;I introduce layers then discuss benefits, approaches, and gotchas with
layer-based configurations.&lt;/p&gt;

&lt;p&gt;I&#39;ve migrated my entire &lt;code&gt;dotspacemacs/user-config&lt;/code&gt; into personal layers - now 6
lines vs 1,500.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d&#34; title=&#34;https://github.com/ekaschalk/.spacemacs.d&#34;&gt;https://github.com/ekaschalk/.spacemacs.d&lt;/a&gt; for my viewer-friendly configuration .&lt;/p&gt;

&lt;h1 id=&#34;introducing-layers&#34;&gt;Introducing Layers&lt;/h1&gt;

&lt;p&gt;This section is not a replacement for &lt;a href=&#34;http://spacemacs.org/doc/LAYERS.html&#34; title=&#34;http://spacemacs.org/doc/LAYERS.html&#34;&gt;http://spacemacs.org/doc/LAYERS.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Layers are directories containing up to 5 files and possibly additional
packages.&lt;/p&gt;

&lt;p&gt;In load order:&lt;/p&gt;

&lt;h3 id=&#34;layers-el&#34;&gt;Layers.el&lt;/h3&gt;

&lt;p&gt;Layer dependencies to load first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(configuration-layer/declare-layers &#39;(theming))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;packages-el&#34;&gt;packages.el&lt;/h3&gt;

&lt;p&gt;Packages added or configured by the layer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq my-layer-packages
      &#39;(a-pkg
        (github-pkg :location (recipe :fetcher github
                                      :repo &amp;quot;github-user/repo-name&amp;quot;))
        (my-pkg :location local)))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Owned Packages:&lt;/strong&gt; A layer owns a package if it defines &lt;code&gt;layer-name/init-pkg-name&lt;/code&gt;. All packages not defined in &lt;code&gt;dotspacemacs/additional/packages&lt;/code&gt; should have one and only one owner. It calls &lt;code&gt;use-package&lt;/code&gt;. Common options are &lt;code&gt;:init&lt;/code&gt; for before load config, &lt;code&gt;:config&lt;/code&gt; for after, &lt;code&gt;:if&lt;/code&gt; for loading if eg. a certain OS or executable is installed, &lt;code&gt;:after&lt;/code&gt; for enforcing load order, and &lt;code&gt;:defer t&lt;/code&gt; for deferred loading.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun display/init-pretty-outlines ()
  (use-package pretty-outlines
    :after outshine
    :config
    (progn
      (add-hook &#39;outline-mode-hook &#39;pretty-outline-set-display-table)
      (add-hook &#39;outline-minor-mode-hook &#39;pretty-outline-set-display-table)
      (add-hook &#39;emacs-lisp-mode-hook &#39;pretty-outline-add-bullets))))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unowned Packages:&lt;/strong&gt; A layer that does not own a package can configure it with &lt;code&gt;layer-name/pre-init-pkg-name&lt;/code&gt; and &lt;code&gt;layer-name/post-init-pkg-name&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun config/pre-init-neotree ()
  (evil-global-set-key &#39;normal (kbd &amp;quot;M-p&amp;quot;)
                       &#39;neotree-find-project-root))

(defun config/post-init-neotree ()
  (setq neo-theme &#39;icons))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Local Packages:&lt;/strong&gt; Personal packages at &lt;code&gt;local/my-pkg/my-pkg.el&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;funcs-el&#34;&gt;funcs.el&lt;/h3&gt;

&lt;p&gt;Layer functions.&lt;/p&gt;

&lt;p&gt;Package agnostic functions belong here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defmacro with-face (STR &amp;amp;rest PROPS)
  &amp;quot;Return STR propertized with PROPS.&amp;quot;
  `(propertize ,STR &#39;face (list ,@PROPS)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Guarding against particular packages being installed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(when (configuration-layer/package-usedp &#39;some-pkg)
  (defun my-func ()))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;config-el&#34;&gt;config.el&lt;/h3&gt;

&lt;p&gt;Layer variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; python/config.el
(defvar python-tab-width 4
  &amp;quot;Tab width value for python buffers&amp;quot;)

;; init.el in dotspacemacs-configuration-layers
(python :variables python-tab-width 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configuration defined here will be loaded before the package init functions are
executed. Layer dependencies are actually loaded prior to config.el.&lt;/p&gt;

&lt;p&gt;This can be used for eg. setting theme updates with the &lt;code&gt;theming&lt;/code&gt; layer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq theming-modifications
      `((solarized-dark (avy-background-face :foreground &amp;quot;#586e75&amp;quot;)
                        (font-lock-doc-face :foreground &amp;quot;#2aa198&amp;quot;))
        (solarized-light ...)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;keybindings-el&#34;&gt;keybindings.el&lt;/h3&gt;

&lt;p&gt;Package-agnostic key-bindings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(global-set-key (kbd &amp;quot;M-d&amp;quot;) &#39;spacemacs/delete-window)

;; Evil will be loaded
(evil-define-key &#39;(normal visual motion) outline-minor-mode-map
  &amp;quot;gh&amp;quot; &#39;outline-up-heading)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;personal-layers&#34;&gt;Personal Layers&lt;/h1&gt;

&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;

&lt;p&gt;While any organization can be used, I recommend at most these 5 layers covering
common needs.&lt;/p&gt;

&lt;h3 id=&#34;a-macros-base-layer&#34;&gt;A Macros/Base Layer&lt;/h3&gt;

&lt;p&gt;A base layer that all personal layers inherit packages, macros, and common
functions from with &lt;code&gt;(configuration-layer/declare-layers &#39;(base))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I load &lt;code&gt;dash-functional&lt;/code&gt; and define &lt;code&gt;with-dir&lt;/code&gt;, &lt;code&gt;with-face&lt;/code&gt;, and other useful
utilities here.&lt;/p&gt;

&lt;h3 id=&#34;config&#34;&gt;Config&lt;/h3&gt;

&lt;p&gt;All packages and their configuration and key-bindings that don&#39;t fit into any
neat grouping.&lt;/p&gt;

&lt;p&gt;When any package&#39;s init gets large, consider a local package. I maintain my
org-mode setup separately in a local &lt;code&gt;org-config&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Anything, excluding spacemacs toggles, can be setup here. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq config-packages &#39;(evil ...))

(defun config/post-init-evil ()
  (setq evil-escape-key-sequence &amp;quot;jk&amp;quot;)
  (setq evil-escape-unordered-key-sequence &amp;quot;true&amp;quot;)
  (advice-add &#39;evil-ex-search-next :after &#39;config/scroll-to-center-advice)
  (advice-add &#39;evil-ex-search-previous :after &#39;config/scroll-to-center-advice))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recommend this layer own &lt;strong&gt;all additional packages&lt;/strong&gt; except themes, see gotchas.&lt;/p&gt;

&lt;h3 id=&#34;display&#34;&gt;Display&lt;/h3&gt;

&lt;p&gt;Theme updates and display packages like &lt;code&gt;spaceline-all-the-icons&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Due to how Spacemacs loads themes, I highly recommend declaring the
 &lt;code&gt;theming&lt;/code&gt; layer a dependency for theme updates. It is much more efficient should
you configure multiple themes, like light and dark versions, and as it is a
layer, it will be loaded prior to &lt;code&gt;config.el&lt;/code&gt; for proper code isolation.&lt;/p&gt;

&lt;p&gt;I integrate and configure my local pretty packages here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;pretty-code&lt;/em&gt; : Program with custom ligatures and symbols, see &lt;a href=&#39;https://ekaschalk.github.io/post/prettify-mode/&#39;&gt;mathematical notation in emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pretty-eshell&lt;/em&gt; : Customize eshell information and faces, see &lt;a href=&#39;https://ekaschalk.github.io/post/custom-eshell/&#39;&gt;making eshell your own&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pretty-fonts&lt;/em&gt; : All the icons and Fira Code ligature integration.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pretty-magit&lt;/em&gt; : Commit leaders, see &lt;a href=&#39;https://ekaschalk.github.io/post/pretty-magit/&#39;&gt;pretty magit - integrating commit leaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pretty-outlines&lt;/em&gt; : Fancy outline bullets and ellipsis, see &lt;a href=&#39;https://ekaschalk.github.io/post/outline-bullets/&#39;&gt;fancy outline bullets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;langs-optional&#34;&gt;Langs (optional)&lt;/h3&gt;

&lt;p&gt;I find it useful to separate programming language configuration out from the
config layer, though it is not necessary.&lt;/p&gt;

&lt;h3 id=&#34;personal-optional&#34;&gt;Personal (optional)&lt;/h3&gt;

&lt;p&gt;All personal packages that aren&#39;t display related I maintain in a single
personal layer. This is only relevant if you write your own packages.&lt;/p&gt;

&lt;p&gt;I setup my blogging and outline-jump packages here.&lt;/p&gt;

&lt;h2 id=&#34;your-init-el&#34;&gt;Your init.el&lt;/h2&gt;

&lt;p&gt;Layers must be declared in your &lt;code&gt;dotspacemacs-configuration-layers&lt;/code&gt; to take effect.&lt;/p&gt;

&lt;p&gt;I&#39;ve organized my layers into several sections:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defvar dotspacemacs/layers/local
  &#39;((macros :location local)
    (config :location local)
    (display :location local)
    (langs :location local)
    (personal :location local))
  &amp;quot;Local layers housed in &#39;~/.spacemacs.d/layers&#39;.&amp;quot;)

(defvar dotspacemacs/layers/core
  &#39;(better-defaults
    git
    org
    ...)
  &amp;quot;Layers I consider core to Spacemacs&amp;quot;)

(defvar dotspacemacs/layers/langs
  &#39;(emacs-lisp
    ...)
  &amp;quot;Programming and markup language layers&amp;quot;)

(defvar dotspacemacs/layers/extra
  &#39;(gnus
    graphviz
    ...)
  &amp;quot;Miscellaneous layers&amp;quot;)

(defun dotspacemacs/layers ()
  (setq-default dotspacemacs-configuration-layer-path &#39;(&amp;quot;~/.spacemacs.d/layers/&amp;quot;)
                dotspacemacs-configuration-layers
                (append dotspacemacs/layers/core
                        dotspacemacs/layers/langs
                        dotspacemacs/layers/extra
                        dotspacemacs/layers/local)
                ...))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gotchas&#34;&gt;Gotchas&lt;/h2&gt;

&lt;p&gt;Migrating was mostly painless. However when things go wrong you lose access to
your setup, an annoying development cycle. I encountered several Spacemacs
idiosyncrasies to be aware of when using layers to replace my user-config.&lt;/p&gt;

&lt;p&gt;Non-obvious errors to avoid:&lt;/p&gt;

&lt;h3 id=&#34;naming&#34;&gt;Naming&lt;/h3&gt;

&lt;p&gt;The naming scheme of &lt;code&gt;setq layer-name-packages&lt;/code&gt; and &lt;code&gt;defun layer-name/init-pkg-name&lt;/code&gt; is strict.
Beware when refactoring that you adjust the layer name accordingly. Failure to
do so will result in the package&#39;s configuration not being loaded or in the case
of ownership, not being installed, rather than a direct error.&lt;/p&gt;

&lt;h3 id=&#34;spacemacs-toggles&#34;&gt;Spacemacs toggles&lt;/h3&gt;

&lt;p&gt;Some toggles like &lt;code&gt;spacemacs/toggle-highlight-long-lines-globally-on&lt;/code&gt; do not
belong in any layer and should be defined in your user-config. Six toggles are
now all that compose my &lt;code&gt;dotspacemacs/user-config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This goes for some toggles not explicitly owned by Spacemacs - trying to setup
 &lt;code&gt;fringe-mode&lt;/code&gt; failed for me even in a &lt;code&gt;config/post-init-fringe&lt;/code&gt; block.&lt;/p&gt;

&lt;h3 id=&#34;os-configuration&#34;&gt;OS Configuration&lt;/h3&gt;

&lt;p&gt;I define &lt;code&gt;is-linuxp&lt;/code&gt; and a few other OS utilities that conditionally setup
 &lt;code&gt;dotspacemacs/init&lt;/code&gt; variables like font size. Layers load after these variables
are set, so the utilities cannot be moved to a layer. Set them at the top of
your &lt;code&gt;init.el&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;additional-themes&#34;&gt;Additional Themes&lt;/h3&gt;

&lt;p&gt;Spacemacs layers load ordering causes issues for extra themes. Theme packages
cannot be put in a layer. As a result, to use solarized I set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; ~/.spacemacs.d/init.el
(defun dotspacemacs/layers ()
  (setq-default dotspacemacs-additional-packages &#39;(solarized-theme)
                ...))
(defun dotspacemacs/init ()
  (setq-default dotspacemacs-themes &#39;(solarized-dark solarized-light)
                ...))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;spacemacs-core-layers&#34;&gt;Spacemacs Core Layers&lt;/h3&gt;

&lt;p&gt;Without doing a deep dive into Spacemacs core, you can expect the following
layers to always be loaded &lt;strong&gt;before all personal layers&lt;/strong&gt;. This is how
 &lt;code&gt;dash&lt;/code&gt; is always available and &lt;code&gt;evil-define-key&lt;/code&gt; can be used in keybindings
files.&lt;/p&gt;

&lt;p&gt;Call &lt;code&gt;g d&lt;/code&gt; or &lt;code&gt;(spacemacs/jump-to-definition)&lt;/code&gt; in emacs lisp mode to jump to
that layer&#39;s packages.el to check out its packages and configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(configuration-layer/declare-layers
 &#39;(spacemacs-base
   spacemacs-completion
   spacemacs-layouts
   spacemacs-editing
   spacemacs-editing-visual
   spacemacs-evil
   spacemacs-language
   spacemacs-misc
   spacemacs-modeline
   spacemacs-navigation
   spacemacs-org
   spacemacs-purpose
   spacemacs-visual))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These layers follow the same rules and principles as every other layer. If you
have the curiosity, these layers make Spacemacs what it is.&lt;/p&gt;

&lt;p&gt;Functionality provided here can be made use of by any layer, assuming those
packages and layers are not explicitly excluded.&lt;/p&gt;

&lt;h1 id=&#34;benefits&#34;&gt;Benefits&lt;/h1&gt;

&lt;p&gt;Those that value organization and robustness will find Spacemacs layers to
improve on other configuration management methods.&lt;/p&gt;

&lt;p&gt;Following Spacemacs conventions leads to predictable, friendly configurations.&lt;/p&gt;

&lt;p&gt;Once you&#39;ve become familiar with its conventions, there is no overhead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fancy Outline Bullets</title>
      <link>https://ekaschalk.github.io/post/outline-bullets/</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/outline-bullets/</guid>
      <description>&lt;p&gt;We improve upon the outline bullets presented in the previous post &lt;a href=&#39;https://ekaschalk.github.io/post/outline-ivy/&#39;&gt;Managing code with Outlines&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;My Headings&lt;/th&gt;
&lt;th&gt;Editing my config&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-bullets-fancy.png&#34; alt=&#34;/img/outline-bullets-fancy.png&#34; title=&#34;/img/outline-bullets-fancy.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-bullets-config.png&#34; alt=&#34;/img/outline-bullets-config.png&#34; title=&#34;/img/outline-bullets-config.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This solution:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Allows for face application to the bullet. The default faces &lt;code&gt;outline-1/2/3...&lt;/code&gt;&lt;/li&gt;
   only apply to the text, not the bullet.
&lt;li&gt;Adds spaces for higher level bullets. So not every outline-level needs to&lt;/li&gt;
   have its text start at the same column.
&lt;li&gt;Works for any number of outline levels.&lt;/li&gt;
&lt;li&gt;Generalized - uses outline regexes, all that is required to add the bullets&lt;/li&gt;
   to a mode is adding to its hook.
&lt;/ol&gt;

&lt;p&gt;The package can be found at: &lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d/tree/master/layers/display/local/pretty-outlines&#34; title=&#34;https://github.com/ekaschalk/.spacemacs.d/tree/master/layers/display/local/pretty-outlines&#34;&gt;https://github.com/ekaschalk/.spacemacs.d/tree/master/layers/display/local/pretty-outlines&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;dash)
(require &#39;outshine)
(require &#39;s)

(provide &#39;pretty-outlines)

;;; Config

(defvar pretty-outline-bullets-bullet-list &#39;(&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot;)
  &amp;quot;An implemention of `org-bullets-bullet-list&#39; for outlines&amp;quot;)

;;; Outline-bullets

(defun pretty-outline--add-font-locks (FONT-LOCK-ALIST)
  &amp;quot;Put text property for FONT-LOCK-ALIST for var-width replacements.&amp;quot;
  (font-lock-add-keywords
   nil (--map (-let (((rgx uni-point) it))
             `(,rgx (0 (progn
                         (put-text-property
                          (match-beginning 1) (match-end 1)
                          &#39;display
                          ,uni-point)
                         nil))))
           FONT-LOCK-ALIST)))

(defun pretty-outline--bullets-rgx-at-level (LEVEL)
  &amp;quot;Calculate regex or outline-bullets at LEVEL.&amp;quot;
  (concat &amp;quot;\\(^&amp;quot;
          (-&amp;gt;&amp;gt; LEVEL
             outshine-calc-outline-string-at-level
             s-trim-right
             (s-replace &amp;quot;*&amp;quot; &amp;quot;\\*&amp;quot;))
          &amp;quot;\\) &amp;quot;))

(defun pretty-outline--propertize-bullet (LEVEL BULLET)
  &amp;quot;Add LEVEL-dependent face to BULLET.&amp;quot;
  (with-face BULLET
             (pcase LEVEL
               (0 &#39;(:inherit outline-1 :underline nil))
               (1 &#39;(:inherit outline-2 :underline nil))
               (2 &#39;(:inherit outline-3 :underline nil))
               (3 &#39;(:inherit outline-4 :underline nil))
               (_ nil))))

(defun pretty-outline-add-bullets ()
  &amp;quot;Use with `add-hook&#39; to enable pretty-outline-bullets-bullet-list for mode.&amp;quot;
  (pretty-outline--add-font-locks
   (--map-indexed
    (list
     (pretty-outline--bullets-rgx-at-level (+ 1 it-index))
     (concat
      (s-repeat it-index &amp;quot; &amp;quot;)
      (pretty-outline--propertize-bullet it-index it)))
    (-take 8 (-cycle pretty-outline-bullets-bullet-list)))))

(add-hook &#39;emacs-lisp-mode-hook &#39;pretty-outline-add-bullets)
(add-hook &#39;hy-mode-hook &#39;pretty-outline-add-bullets)
(add-hook &#39;python-mode-hook &#39;pretty-outline-add-bullets)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Managing code with Outlines</title>
      <link>https://ekaschalk.github.io/post/outline-ivy/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/outline-ivy/</guid>
      <description>&lt;p&gt;I consider outlines an under-utilized yet killer feature of Emacs.&lt;/p&gt;

&lt;p&gt;This post is split into two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Introducing and customizing &lt;code&gt;outline-mode&lt;/code&gt; and &lt;code&gt;outshine-mode&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d/blob/master/layers/personal/local/outline-ivy/outline-ivy.el&#34; title=&#34;My package&#34;&gt;My package&lt;/a&gt; &lt;code&gt;outline-ivy&lt;/code&gt; for jumping to outlines.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-ivy.gif&#34; alt=&#34;/img/outline-ivy.gif&#34; title=&#34;/img/outline-ivy.gif&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;intro-to-outlines&#34;&gt;Intro to Outlines&lt;/h1&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Outline-mode is a general framework for headers. Org-mode itself uses
outline-mode.&lt;/p&gt;

&lt;p&gt;Headers are demarcated by the current major-mode&#39;s comment syntax, typically
with levels determined by the proceeding number of &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python: &lt;code&gt;# *&lt;/code&gt; is a level 1 header, &lt;code&gt;# **&lt;/code&gt; a level 2 header...&lt;/li&gt;
&lt;li&gt;Haskell: &lt;code&gt;--*&lt;/code&gt; &lt;code&gt;--**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clojure: &lt;code&gt;;; *&lt;/code&gt; &lt;code&gt;;; **&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Emacs lisp uses &lt;code&gt;;;;&lt;/code&gt;, &lt;code&gt;;;;;&lt;/code&gt;, ... for compatibility with the many packages that
use the original, not asterisk-based, outline format.&lt;/p&gt;

&lt;p&gt;The package &lt;code&gt;outshine&lt;/code&gt; gives utility like narrowing and cycling to these
outlines.&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Enable outlines and outshine with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; Require packages for following code
(require &#39;dash)
(require &#39;outshine)

;; Required for outshine
(add-hook &#39;outline-minor-mode-hook &#39;outshine-hook-function)

;; Enables outline-minor-mode for *ALL* programming buffers
(add-hook &#39;prog-mode-hook &#39;outline-minor-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;keybindings&#34;&gt;Keybindings&lt;/h2&gt;

&lt;p&gt;I remap &lt;code&gt;outline-minor-mode-map&lt;/code&gt; to mirror org-mode. Provided are evil and
leader-key based bindings. Reference org-mode for developing your own
emacs-style bindings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; Narrowing now works within the headline rather than requiring to be on it
(advice-add &#39;outshine-narrow-to-subtree :before
            (lambda (&amp;amp;rest args) (unless (outline-on-heading-p t)
                                   (outline-previous-visible-heading 1))))

(spacemacs/set-leader-keys
  ;; Narrowing
  &amp;quot;nn&amp;quot; &#39;outshine-narrow-to-subtree
  &amp;quot;nw&amp;quot; &#39;widen

  ;; Structural edits
  &amp;quot;nj&amp;quot; &#39;outline-move-subtree-down
  &amp;quot;nk&amp;quot; &#39;outline-move-subtree-up
  &amp;quot;nh&amp;quot; &#39;outline-promote
  &amp;quot;nl&amp;quot; &#39;outline-demote)

(let ((kmap outline-minor-mode-map))
  (define-key kmap (kbd &amp;quot;M-RET&amp;quot;) &#39;outshine-insert-heading)
  (define-key kmap (kbd &amp;quot;&amp;lt;backtab&amp;gt;&amp;quot;) &#39;outshine-cycle-buffer)

  ;; Evil outline navigation keybindings
  (evil-define-key &#39;(normal visual motion) kmap
    &amp;quot;gh&amp;quot; &#39;outline-up-heading
    &amp;quot;gj&amp;quot; &#39;outline-forward-same-level
    &amp;quot;gk&amp;quot; &#39;outline-backward-same-level
    &amp;quot;gl&amp;quot; &#39;outline-next-visible-heading
    &amp;quot;gu&amp;quot; &#39;outline-previous-visible-heading))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;styling&#34;&gt;Styling&lt;/h2&gt;

&lt;h3 id=&#34;faces&#34;&gt;Faces&lt;/h3&gt;

&lt;p&gt;Outline headers fulfill a different goal than org headers. Outlines are for
structuring semantically similar blocks of code. Org headers additionally
incorporate todos, priorities, tags, and so on.&lt;/p&gt;

&lt;p&gt;Outlines are necessarily further apart than org headers, which often have no
subtext at all.&lt;/p&gt;

&lt;p&gt;So I recommend setting both the &lt;code&gt;:background&lt;/code&gt; and &lt;code&gt;:height&lt;/code&gt; face attributes to
highlight and make obvious the different sections.&lt;/p&gt;

&lt;p&gt;This can be done by updating the &lt;code&gt;outline-1/2/3...&lt;/code&gt; faces.
Org mode header faces can set separately using the &lt;code&gt;org-level-1/2/3...&lt;/code&gt; faces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq my-black &amp;quot;#1b1b1e&amp;quot;)

(custom-theme-set-faces
 &#39;solarized-dark
 `(outline-1 ((t (:height 1.25 :background &amp;quot;#268bd2&amp;quot;
                          :foreground ,my-black :weight bold))))
 `(outline-2 ((t (:height 1.15 :background &amp;quot;#2aa198&amp;quot;
                          :foreground ,my-black :weight bold))))
 `(outline-3 ((t (:height 1.05 :background &amp;quot;#b58900&amp;quot;
                          :foreground ,my-black :weight bold)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bullets&#34;&gt;Bullets&lt;/h3&gt;

&lt;p&gt;Now these outlines will be displayed with the comment syntax, there is no mirror
of &lt;code&gt;org-bullets-bullet-list&lt;/code&gt; for setting icons to replace the eg. &#39;;;;&#39;.&lt;/p&gt;

&lt;p&gt;We need to use &lt;code&gt;compose-region&lt;/code&gt; to manually replace the headers with our custom
bullets. Here is an image of my org-bullets replicated for outlines.
&lt;img src=&#34;https://ekaschalk.github.io/img/outline-bullets.png&#34; alt=&#34;/img/outline-bullets.png&#34; title=&#34;/img/outline-bullets.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The following code is generalized to replace symbols for possibly many modes and
is a bit complex. Here I implement the outline bullets for lisp-like modes and
python.&lt;/p&gt;

&lt;p&gt;UPDATE: Check &lt;a href=&#39;https://ekaschalk.github.io/post/outline-bullets/&#39;&gt;this post for full implementation.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defun -add-font-lock-kwds (FONT-LOCK-ALIST)
  (font-lock-add-keywords
   nil (--map (-let (((rgx uni-point) it))
                `(,rgx (0 (progn
                            (compose-region (match-beginning 1) (match-end 1)
                                            ,(concat &amp;quot;\t&amp;quot; (list uni-point)))
                            nil))))
              FONT-LOCK-ALIST)))

(defmacro add-font-locks (FONT-LOCK-HOOKS-ALIST)
  `(--each ,FONT-LOCK-HOOKS-ALIST
     (-let (((font-locks . mode-hooks) it))
       (--each mode-hooks
         (add-hook it (-partial &#39;-add-font-lock-kwds
                                (symbol-value font-locks)))))))

(defconst emacs-outlines-font-lock-alist
  ;; Outlines
  &#39;((&amp;quot;\\(^;;;\\) &amp;quot;          ?■)
    (&amp;quot;\\(^;;;;\\) &amp;quot;         ?○)
    (&amp;quot;\\(^;;;;;\\) &amp;quot;        ?✸)
    (&amp;quot;\\(^;;;;;;\\) &amp;quot;       ?✿)))

(defconst lisp-outlines-font-lock-alist
  ;; Outlines
  &#39;((&amp;quot;\\(^;; \\*\\) &amp;quot;          ?■)
    (&amp;quot;\\(^;; \\*\\*\\) &amp;quot;       ?○)
    (&amp;quot;\\(^;; \\*\\*\\*\\) &amp;quot;    ?✸)
    (&amp;quot;\\(^;; \\*\\*\\*\\*\\) &amp;quot; ?✿)))

(defconst python-outlines-font-lock-alist
  &#39;((&amp;quot;\\(^# \\*\\) &amp;quot;          ?■)
    (&amp;quot;\\(^# \\*\\*\\) &amp;quot;       ?○)
    (&amp;quot;\\(^# \\*\\*\\*\\) &amp;quot;    ?✸)
    (&amp;quot;\\(^# \\*\\*\\*\\*\\) &amp;quot; ?✿)))

(add-font-locks
 &#39;((emacs-outlines-font-lock-alist emacs-lisp-mode-hook)
   (lisp-outlines-font-lock-alist clojure-mode-hook hy-mode-hook)
   (python-outlines-font-lock-alist python-mode-hook)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could eventually be improved to work for any number of levels and
auto-determine the outline regex base on the comment syntax.&lt;/p&gt;

&lt;h3 id=&#34;ellipsis&#34;&gt;Ellipsis&lt;/h3&gt;

&lt;p&gt;Org-mode has the variable &lt;code&gt;org-ellipsis&lt;/code&gt; for setting the trailing chars for
collapsed headers.&lt;/p&gt;

&lt;p&gt;We can set our own outline ellipsis icon as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defvar outline-display-table (make-display-table))
(set-display-table-slot outline-display-table &#39;selective-display
                        (vector (make-glyph-code ?▼ &#39;escape-glyph)))
(defun set-outline-display-table ()
  (setf buffer-display-table outline-display-table))

(add-hook &#39;outline-mode-hook &#39;set-outline-display-table)
(add-hook &#39;outline-minor-mode-hook &#39;set-outline-display-table)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;outline-ivy&#34;&gt;Outline-ivy&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;All the outlines&lt;/th&gt;
&lt;th&gt;Searching catches children&lt;/th&gt;
&lt;th&gt;Restricting Levels&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-ivy-raw.png&#34; alt=&#34;/img/outline-ivy-raw.png&#34; title=&#34;/img/outline-ivy-raw.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-ivy-many.png&#34; alt=&#34;/img/outline-ivy-many.png&#34; title=&#34;/img/outline-ivy-many.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outline-ivy-level.png&#34; alt=&#34;/img/outline-ivy-level.png&#34; title=&#34;/img/outline-ivy-level.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Current methods for jumping to outlines have significant limitations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d/blob/master/layers/personal/local/outline-ivy/outline-ivy.el&#34; title=&#34;Outline-ivy&#34;&gt;Outline-ivy&lt;/a&gt; makes outlines a proper navigational, not just organizational, tool
with &lt;code&gt;oi-jump&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All outlines are collected, stylized, and associated with their parents.&lt;/p&gt;

&lt;p&gt;Parents are inserted as invisible text for child outlines. This way, searching
for eg. &#34;Display&#34; catches all its children.&lt;/p&gt;

&lt;p&gt;The level is also inserted and hidden enabling the search &#34;1 spacemacs&#34; to catch
only top-level headings matching spacemacs. It also overrides &lt;code&gt;ivy-match-face&lt;/code&gt; and
 &lt;code&gt;ivy-height&lt;/code&gt; to play nice with the propertized prompt strings.&lt;/p&gt;

&lt;p&gt;The default configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(defvar oi-height 20
  &amp;quot;Number of outlines to display, overrides ivy-height.&amp;quot;)

(defface oi-match-face
  &#39;((t :height 1.10 :foreground &amp;quot;light gray&amp;quot;))
  &amp;quot;Match face for ivy outline prompt.&amp;quot;)

(defface oi-face-1
  &#39;((t :foreground &amp;quot;#268bd2&amp;quot; :height 1.25 :underline t :weight ultra-bold))
  &amp;quot;Ivy outline face for level 1&amp;quot;)

(defface oi-face-2
  &#39;((t :foreground &amp;quot;#2aa198&amp;quot; :height 1.1 :weight semi-bold))
  &amp;quot;Ivy outline face for level 2&amp;quot;)

(defface oi-face-3
  &#39;((t :foreground &amp;quot;steel blue&amp;quot;))
  &amp;quot;Ivy outline face for level 3&amp;quot;)

;; My keybinding for oi-jump, unbound by default.
(global-set-key (kbd &amp;quot;C-j&amp;quot;) &#39;oi-jump)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many emacs lisp packages both intentionally and unintentionally use the outline
syntax for organizing their source. These changes can make understanding and
navigating the source significantly easier.&lt;/p&gt;

&lt;p&gt;Below is a screenshot jumping to an outline in &lt;code&gt;org.el&lt;/code&gt;, the core org source
file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/outlines-org.png&#34; alt=&#34;/img/outlines-org.png&#34; title=&#34;/img/outlines-org.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&#39;m not sure how difficult it would be to port this package to &lt;code&gt;helm&lt;/code&gt;. This is
one of many updates I&#39;ll look to add eventually, such as adding more quick
actions to the prompt like jump-and-narrow or a projective jump version.&lt;/p&gt;

&lt;h1 id=&#34;my-experience&#34;&gt;My Experience&lt;/h1&gt;

&lt;p&gt;Perhaps the best judge of the impact of some configuration is how often you
find yourself reaching for it. For buffer-wide navigation to a specific area
rather than some specific symbol or function, I now almost exclusively use
 &lt;code&gt;oi-jump&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I consider outlines to be one of the most practical features of Emacs. All
source code, in any language, I organize with outlines. Given how unobtrusive
the syntax is, it shouldn&#39;t be difficult to implement in a collaborative
project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pretty Magit - Integrating commit leaders</title>
      <link>https://ekaschalk.github.io/post/pretty-magit/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/pretty-magit/</guid>
      <description>&lt;p&gt;A comparison of how I see my commit logs and how they truly are:&lt;/p&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/magit-symbols.png&#34; alt=&#34;/img/spacemacs/magit-symbols.png&#34; title=&#34;/img/spacemacs/magit-symbols.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/magit-raw.png&#34; alt=&#34;/img/spacemacs/magit-raw.png&#34; title=&#34;/img/spacemacs/magit-raw.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Typically this would be accomplished with Emacs &lt;code&gt;font-lock-mode&lt;/code&gt;. However Magit
is magic, even trivial uses of &lt;code&gt;font-lock-add-keywords&lt;/code&gt; will break fontification
for the entire buffer.&lt;/p&gt;

&lt;p&gt;This post addresses adding faces to Magit to achieve in particular icon and
colored commit leaders. I also integrate Ivy/Helm to prompt a leader when
committing so you need not remember or type out completely every leader you
choose.&lt;/p&gt;

&lt;h1 id=&#34;adding-leaders&#34;&gt;Adding leaders&lt;/h1&gt;

&lt;p&gt;We cannot use font-locks so we compose the symbols and add the face text
properties ourselves.&lt;/p&gt;

&lt;p&gt;Users will interact with the macro &lt;code&gt;pretty-magit&lt;/code&gt; which takes a word such as
Fix, Add, and Docs, a unicode point to replace it with, a face attributes plist,
and optionally whether to exclude it from being added to the commit prompt.&lt;/p&gt;

&lt;dl&gt;
My personal choices for leaders are:
&lt;dt&gt;Add&lt;/dt&gt;
&lt;dd&gt;Any feature or update - check mark&lt;/dd&gt;
&lt;dt&gt;Fix&lt;/dt&gt;
&lt;dd&gt;Any bug fix - a bug&lt;/dd&gt;
&lt;dt&gt;Clean&lt;/dt&gt;
&lt;dd&gt;Any kind of refactoring - scissors&lt;/dd&gt;
&lt;dt&gt;Docs&lt;/dt&gt;
&lt;dd&gt;Documentation changes - info symbol&lt;/dd&gt;
&lt;dt&gt;Feature&lt;/dt&gt;
&lt;dd&gt;A milestone commit - flagpost&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;I also fontify origin and master with the github icon and branch icon
respectively, and exclude these from the commit prompts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;dash)

(defmacro pretty-magit (WORD ICON PROPS &amp;amp;optional NO-PROMPT?)
  &amp;quot;Replace sanitized WORD with ICON, PROPS and by default add to prompts.&amp;quot;
  `(prog1
     (add-to-list &#39;pretty-magit-alist
                  (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? &amp;quot;&amp;quot; &amp;quot;:&amp;quot;))))
                        ,ICON &#39;,PROPS))
     (unless ,NO-PROMPT?
       (add-to-list &#39;pretty-magit-prompt (concat ,WORD &amp;quot;: &amp;quot;)))))

(setq pretty-magit-alist nil)
(setq pretty-magit-prompt nil)
(pretty-magit &amp;quot;Feature&amp;quot; ? (:foreground &amp;quot;slate gray&amp;quot; :height 1.2))
(pretty-magit &amp;quot;Add&amp;quot;     ? (:foreground &amp;quot;#375E97&amp;quot; :height 1.2))
(pretty-magit &amp;quot;Fix&amp;quot;     ? (:foreground &amp;quot;#FB6542&amp;quot; :height 1.2))
(pretty-magit &amp;quot;Clean&amp;quot;   ? (:foreground &amp;quot;#FFBB00&amp;quot; :height 1.2))
(pretty-magit &amp;quot;Docs&amp;quot;    ? (:foreground &amp;quot;#3F681C&amp;quot; :height 1.2))
(pretty-magit &amp;quot;master&amp;quot;  ? (:box t :height 1.2) t)
(pretty-magit &amp;quot;origin&amp;quot;  ? (:box t :height 1.2) t)

(defun add-magit-faces ()
  &amp;quot;Add face properties and compose symbols for buffer from pretty-magit.&amp;quot;
  (interactive)
  (with-silent-modifications
    (--each pretty-magit-alist
      (-let (((rgx icon props) it))
        (save-excursion
          (goto-char (point-min))
          (while (search-forward-regexp rgx nil t)
            (compose-region
             (match-beginning 1) (match-end 1) icon)
            (when props
              (add-face-text-property
               (match-beginning 1) (match-end 1) props))))))))

(advice-add &#39;magit-status :after &#39;add-magit-faces)
(advice-add &#39;magit-refresh-buffer :after &#39;add-magit-faces)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&#39;ve tried about all the magit hooks and the only way to apply these updates are
with &lt;code&gt;advice-add&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;adding-ivy-or-helm&#34;&gt;Adding Ivy or Helm&lt;/h1&gt;

&lt;p&gt;Since this is Emacs, we can do better than typing out the leaders we&#39;ve chosen
each time we are committing. Here I present a solution with Ivy but Helm would
be little different.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;git-commit-setup-hook&lt;/code&gt; they provide has a delayed execution.
Magit&#39;s ammend, reword, and other commit bindings internally use that same hook.
However, it does not make sense to prompt a leader in those cases.
We can only distinguish a plain new commit by the call of &lt;code&gt;magit-commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With these observations, we must advise &lt;code&gt;magit-commit&lt;/code&gt; to let the hook know
whether to call the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq use-magit-commit-prompt-p nil)
(defun use-magit-commit-prompt (&amp;amp;rest args)
  (setq use-magit-commit-prompt-p t))

(defun magit-commit-prompt ()
  &amp;quot;Magit prompt and insert commit header with faces.&amp;quot;
  (interactive)
  (when use-magit-commit-prompt-p
    (setq use-magit-commit-prompt-p nil)
    (insert (ivy-read &amp;quot;Commit Type &amp;quot; pretty-magit-prompt
                      :require-match t :sort t :preselect &amp;quot;Add: &amp;quot;))
    ;; Or if you are using Helm...
    ;; (insert (helm :sources (helm-build-sync-source &amp;quot;Commit Type &amp;quot;
    ;;                          :candidates pretty-magit-prompt)
    ;;               :buffer &amp;quot;*magit cmt prompt*&amp;quot;))
    ;; I haven&#39;t tested this but should be simple to get the same behaior
    (add-magit-faces)
    (evil-insert 1)  ; If you use evil
    ))

(remove-hook &#39;git-commit-setup-hook &#39;with-editor-usage-message)
(add-hook &#39;git-commit-setup-hook &#39;magit-commit-prompt)
(advice-add &#39;magit-commit :after &#39;use-magit-commit-prompt)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/magit-prompt.png&#34; alt=&#34;/img/magit-prompt.png&#34; title=&#34;/img/magit-prompt.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;further&#34;&gt;Further&lt;/h1&gt;

&lt;p&gt;Beware of two very minor issues that I have not been able to resolve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you escape an ivy leader prompt, then next commit will skip the prompt and&lt;/li&gt;
   will work fine thereon. Avoid by just not escaping the prompt.
&lt;li&gt;In the commit messages, the insertion from the ivy prompt will be the right&lt;/li&gt;
   symbol, but lose its face properties when text is inserted. This is due to
   deep Magit propertize magic.
&lt;/ol&gt;

&lt;p&gt;There are many possible leaders, consider these options&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Add&lt;/dt&gt;
&lt;dd&gt;Create a capability e.g. feature, test, dependency.&lt;/dd&gt;
&lt;dt&gt;Cut&lt;/dt&gt;
&lt;dd&gt;Remove a capability e.g. feature, test, dependency.&lt;/dd&gt;
&lt;dt&gt;Fix&lt;/dt&gt;
&lt;dd&gt;Fix an issue e.g. bug, typo, accident, misstatement.&lt;/dd&gt;
&lt;dt&gt;Bump&lt;/dt&gt;
&lt;dd&gt;Increase the version of something e.g. dependency.&lt;/dd&gt;
&lt;dt&gt;Make&lt;/dt&gt;
&lt;dd&gt;Change the build process, or tooling, or infra.&lt;/dd&gt;
&lt;dt&gt;Start&lt;/dt&gt;
&lt;dd&gt;Begin doing something; e.g. create a feature flag.&lt;/dd&gt;
&lt;dt&gt;Stop&lt;/dt&gt;
&lt;dd&gt;End doing something; e.g. remove a feature flag.&lt;/dd&gt;
&lt;dt&gt;Refactor&lt;/dt&gt;
&lt;dd&gt;A code change that MUST be just a refactoring.&lt;/dd&gt;
&lt;dt&gt;Reformat&lt;/dt&gt;
&lt;dd&gt;Refactor of formatting, e.g. omit whitespace.&lt;/dd&gt;
&lt;dt&gt;Optimize&lt;/dt&gt;
&lt;dd&gt;Refactor of performance, e.g. speed up code.&lt;/dd&gt;
&lt;dt&gt;Document&lt;/dt&gt;
&lt;dd&gt;Refactor of documentation, e.g. help files.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Commit leader examples taken from from https://news.ycombinator.com/item?id=13889155. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making eshell your own</title>
      <link>https://ekaschalk.github.io/post/custom-eshell/</link>
      <pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/custom-eshell/</guid>
      <description>&lt;p&gt;I have written utilities for choosing what information, icons, and faces your
eshell prompt presents.&lt;/p&gt;

&lt;p&gt;Example eshell prompts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/esh-ex.png&#34; alt=&#34;/img/esh-ex.png&#34; title=&#34;/img/esh-ex.png&#34; /&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/esh-me.png&#34; alt=&#34;/img/esh-me.png&#34; title=&#34;/img/esh-me.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Eshell prompt customization takes place in &lt;code&gt;eshell-prompt-function&lt;/code&gt; and
 &lt;code&gt;eshell-prompt-regexp&lt;/code&gt;. The former determines the content of your prompt
while the latter distinguishes your commands.&lt;/p&gt;

&lt;p&gt;I define a macro &lt;code&gt;esh-section&lt;/code&gt; taking a name, an icon, a form or variable to be
evaluated, and optionally face properties. They create anonymous functions which
will be evaluated and concatenated at prompt-time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;dash)
(require &#39;s)

(defmacro with-face (STR &amp;amp;rest PROPS)
  &amp;quot;Return STR propertized with PROPS.&amp;quot;
  `(propertize ,STR &#39;face (list ,@PROPS)))

(defmacro esh-section (NAME ICON FORM &amp;amp;rest PROPS)
  &amp;quot;Build eshell section NAME with ICON prepended to evaled FORM with PROPS.&amp;quot;
  `(setq ,NAME
         (lambda () (when ,FORM
                      (-&amp;gt; ,ICON
                          (concat esh-section-delim ,FORM)
                          (with-face ,@PROPS))))))

(defun esh-acc (acc x)
  &amp;quot;Accumulator for evaluating and concatenating esh-sections.&amp;quot;
  (--if-let (funcall x)
      (if (s-blank? acc)
          it
        (concat acc esh-sep it))
    acc))

(defun esh-prompt-func ()
  &amp;quot;Build `eshell-prompt-function&#39;&amp;quot;
  (concat esh-header
          (-reduce-from &#39;esh-acc &amp;quot;&amp;quot; eshell-funcs)
          &amp;quot;\n&amp;quot;
          eshell-prompt-string))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets define the needed configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; Separator between esh-sections
(setq esh-sep &amp;quot;  &amp;quot;)  ; or &amp;quot; | &amp;quot;

;; Separator between an esh-section icon and form
(setq esh-section-delim &amp;quot; &amp;quot;)

;; Eshell prompt header
(setq esh-header &amp;quot;\n &amp;quot;)  ; or &amp;quot;\n┌─&amp;quot;

;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
;; your login, these can be the same.
(setq eshell-prompt-regexp &amp;quot; &amp;quot;)   ; or &amp;quot;└─&amp;gt; &amp;quot;
(setq eshell-prompt-string &amp;quot; &amp;quot;)   ; or &amp;quot;└─&amp;gt; &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are set to build some sections. A note, if a section&#39;s form returns nil,
then it will be skipped, so the effect of eg. python virtual environments will
only appear when you have an active venv.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(esh-section esh-dir
             &amp;quot;\xf07c&amp;quot;  ;  (faicon folder)
             (abbreviate-file-name (eshell/pwd))
             &#39;(:foreground &amp;quot;gold&amp;quot; :bold ultra-bold :underline t))

(esh-section esh-git
             &amp;quot;\xe907&amp;quot;  ;  (git icon)
             (magit-get-current-branch)
             &#39;(:foreground &amp;quot;pink&amp;quot;))

(esh-section esh-python
             &amp;quot;\xe928&amp;quot;  ;  (python icon)
             pyvenv-virtual-env-name)

(esh-section esh-clock
             &amp;quot;\xf017&amp;quot;  ;  (clock icon)
             (format-time-string &amp;quot;%H:%M&amp;quot; (current-time))
             &#39;(:foreground &amp;quot;forest green&amp;quot;))

;; Below I implement a &amp;quot;prompt number&amp;quot; section
(setq esh-prompt-num 0)
(add-hook &#39;eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
(advice-add &#39;eshell-send-input :before
            (lambda (&amp;amp;rest args) (setq esh-prompt-num (incf esh-prompt-num))))

(esh-section esh-num
             &amp;quot;\xf0c9&amp;quot;  ;  (list icon)
             (number-to-string esh-prompt-num)
             &#39;(:foreground &amp;quot;brown&amp;quot;))

;; Choose which eshell-funcs to enable
(setq eshell-funcs (list esh-dir esh-git esh-python esh-clock esh-num))

;; Enable the new eshell prompt
(setq eshell-prompt-function &#39;esh-prompt-func)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Further extensions to explore are predicate-based face application for eg.
distinguishing master and other branches and modeline-like foreground separation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/ekaschalk/f0ac91c406ad99e53bb97752683811a5&#34; title=&#34;I&#39;ve hosted the code altogether at this gist&#34;&gt;I&#39;ve hosted the code altogether at this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ekaschalk/dotspacemacs/blob/master/.spacemacs&#34; title=&#34;display/shell in my config&#34;&gt;display/shell in my config&lt;/a&gt; will host the most recent iteration and all my other
emacs tweaks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anonymous function macro in elisp</title>
      <link>https://ekaschalk.github.io/post/xi-macro/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/xi-macro/</guid>
      <description>&lt;p&gt;Clojure has anonymous functions with the reader macro &lt;code&gt;#(&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;
(#(print %2 %1) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emacs Lisp doesn&#39;t have reader macros, but we can take direction from Hylang, a
lisp dialect similar to Clojure inter-oping with Python.&lt;/p&gt;

&lt;p&gt;It implements the anonymous functions as the aptly named &lt;code&gt;xi&lt;/code&gt; macro, where the
lambda has arguments determined by presence of &lt;code&gt;x1 ... xi&lt;/code&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
((xi print x2 x1) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can implement the &lt;code&gt;xi&lt;/code&gt; macro in Emacs Lisp roughly as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;dash)
(require &#39;s)

(defmacro xi (&amp;amp;rest FORMS)
  `(lambda ,(--filter (s-contains? (symbol-name it)
                                   (prin1-to-string FORMS))
                      &#39;(x1 x2 x3 x4 x5))
     ,FORMS))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This enables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(funcall (xi print (concat x2 x1)) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
;; expands to
(funcall (lambda (x1 x2) (print (concat x2 x1))) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This implementation could be improved - the above example works with &lt;code&gt;(xi x3 x1)&lt;/code&gt;,
it doesn&#39;t actually validate that the xi are contiguous. It also doesn&#39;t cover
all numbers of arguments, though over 5 arguments would be questionable anyway.
Lastly it does not distinguish xis as part of say strings.&lt;/p&gt;

&lt;p&gt;This macro is especially useful for lambdas without arguments, like adding hooks
and keybindings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(add-hook &#39;eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
;; Becomes
(add-hook &#39;eshell-exit-hook (xi setq esh-prompt-num 0))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An Emacs Blogging Workflow</title>
      <link>https://ekaschalk.github.io/post/org-mode-blogging/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/org-mode-blogging/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt; is a static site generator. It natively supports org-mode, builds fast, and
has live reloading.&lt;/p&gt;

&lt;p&gt;I have two repos for &lt;a href=&#34;https://github.com/ekaschalk/blog&#34; title=&#34;blog content and settings&#34;&gt;blog content and settings&lt;/a&gt; and &lt;a href=&#34;https://github.com/ekaschalk/ekaschalk.github.io&#34; title=&#34;hugo output&#34;&gt;hugo output&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have defined some emacs lisp utilities to make interacting with Hugo easier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deploy-blog&lt;/code&gt; will goto your blog content, run &lt;code&gt;hugo&lt;/code&gt;, cleanup old html, and
push the updates.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;start-blog-server&lt;/code&gt; will run &lt;code&gt;hugo server&lt;/code&gt; if not already running, and open the
webpage in your browser.&lt;/p&gt;

&lt;p&gt;My blog workflow is then to startup the server (SPC a a), write some content in
org-mode and see it reflected in the browser on each save, and deploy (SPC a b).&lt;/p&gt;

&lt;p&gt;All the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;cl)
(require &#39;dash)

(setq blog-dir &amp;quot;~/dev/blog&amp;quot;
      public-blog-dir &amp;quot;~/dev/public-blog&amp;quot;
      hugo-process &amp;quot;Hugo Server&amp;quot;
      hugo-server-site &amp;quot;http://localhost:1313/&amp;quot;)

(defmacro with-dir (DIR &amp;amp;rest FORMS)
  &amp;quot;Execute FORMS in DIR.&amp;quot;
  (let ((orig-dir (gensym)))
    `(progn (setq ,orig-dir default-directory)
            (cd ,DIR) ,@FORMS (cd ,orig-dir))))

(defun deploy-blog ()
  &amp;quot;Run hugo and push changes upstream.&amp;quot;
  (interactive)
  (with-dir public-blog-dir
            (shell-command &amp;quot;git rm -rf .&amp;quot;)
            (shell-command &amp;quot;git clean -fxd&amp;quot;)

            (with-dir blog-dir (-&amp;gt;&amp;gt; public-blog-dir
                                    (concat &amp;quot;hugo -d &amp;quot;)
                                    shell-command))

            (shell-command &amp;quot;git add .&amp;quot;)
            (--&amp;gt; (current-time-string)
                 (concat &amp;quot;git commit -m \&amp;quot;&amp;quot; it &amp;quot;\&amp;quot;&amp;quot;)
                 (shell-command it))
            (magit-push-current-to-upstream nil)))

(defun start-blog-server ()
  &amp;quot;Run hugo server if not already running and open its webpage.&amp;quot;
  (interactive)
  (with-dir blog-dir
            (unless (get-process hugo-process)
              (start-process hugo-process nil &amp;quot;hugo&amp;quot; &amp;quot;server&amp;quot;))
            (browse-url hugo-server-site)))

(defun end-blog-server ()
  &amp;quot;End hugo server process if running.&amp;quot;
  (interactive)
  (--when-let (get-process hugo-process)
    (delete-process it)))

(spacemacs/set-leader-keys (kbd &amp;quot;ab&amp;quot;) &#39;deploy-blog)
(spacemacs/set-leader-keys (kbd &amp;quot;aa&amp;quot;) &#39;start-blog-server)
(spacemacs/set-leader-keys (kbd &amp;quot;ae&amp;quot;) &#39;end-blog-server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For reference, this blog post is an ordinary org file with just the headers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
#+TITLE: An Emacs Blogging Workflow
#+SLUG: org-mode-blogging
#+DATE: 2017-06-20
#+CATEGORIES: emacs org-mode
#+SUMMARY: Easy org-mode blogging with Hugo
#+DRAFT: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And hugo takes care of the rest.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unicode Python Infix Operators</title>
      <link>https://ekaschalk.github.io/post/python-infix/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/python-infix/</guid>
      <description>&lt;p&gt;Custom infix operators can be emulated in Python using &lt;strong&gt;prettify-symbols-mode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/python-infix.png&#34; width=700px&gt;&lt;/p&gt;
&lt;!-- [[file:/img/python-infix.png]] --&gt;

&lt;p&gt;In your emacs config include:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(global-prettify-symbols-mode 1)
(add-hook &#39;python-mode-hook
          (lambda ()
            (mapc (lambda (pair) (push pair prettify-symbols-alist))
                  &#39;((&amp;quot;@compose@&amp;quot;  . #X2218)
                    (&amp;quot;@pipe@&amp;quot;     . #Xe135)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;pip install infix&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Optionally &lt;code&gt;pip install toolz&lt;/code&gt;, a functional programming library, otherwise you
can define the infix operations yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import toolz.curried as tz
from infix import custom_infix as infix

@infix(&#39;__rmatmul__&#39;, &#39;__matmul__&#39;)
def compose(a, b):
    return tz.compose(a, b)

@infix(&#39;__rmatmul__&#39;, &#39;__matmul__&#39;)
def pipe(a, b):
    return tz.pipe(a, b)

[1, 2, 3] @pipe@ (tuple @compose@ tz.map(lambda x: x+1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other interesting functions - cons as &#39;:&#39; and concatv/itertools.chain as &#39;++&#39;.&lt;/p&gt;

&lt;p&gt;I do not recommend using this trick in production but it is certainly cool to see
emacs enabling these shenanigans.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mathematical Notation in Emacs</title>
      <link>https://ekaschalk.github.io/post/prettify-mode/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/prettify-mode/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/python-code.png&#34; /&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/hy-code.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sequences of characters are represented as a single token using:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Pretty-mode&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;https://github.com/akatov/pretty-mode&#34;&gt;Pretty-mode&lt;/a&gt; provides Greeks,
subscripts, and more symbols.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Prettify-symbols-mode&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;http://emacsredux.com/blog/2014/08/25/a-peek-at-emacs-24-dot-4-prettify-symbols-mode/&#34;&gt;Prettify
Symbols&lt;/a&gt;
ships with Emacs as of 24.4 and adds support for custom Unicode replacement
of symbols.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Ligatures&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Unicode replacements of common operators (see &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira
Code&lt;/a&gt;, the font I use, and &lt;a href=&#34;https://github.com/fabrizioschiavi/pragmatapro&#34;&gt;Pragmata
Pro&lt;/a&gt; fonts)&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Any combination of these tools may be chosen; Fira Code is not required to
utilize prettify-symbols or pretty-mode. Similarly, the entire Fira Code
font is not required to use Fira&amp;rsquo;s ligatures.&lt;/p&gt;

&lt;p&gt;The replacements are purely visual - searching for &amp;ldquo;for&amp;rdquo; will find the for all symbol.&lt;/p&gt;

&lt;h1 id=&#34;pretty-mode&#34;&gt;Pretty mode&lt;/h1&gt;

&lt;p&gt;The package &lt;a href=&#34;https://github.com/akatov/pretty-mode&#34;&gt;pretty-mode&lt;/a&gt; provides
default symbol replacements including in, not in, and, or, and greek letters.&lt;/p&gt;

&lt;p&gt;Overlap with Fira Code operators can be handled by deactivating the operator,
equality, and arrow groups. Sub/superscripts, greek letters, and the sigma
summation must be manually activated.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;:logic&lt;/code&gt; group overlaps/interferes with prettify-symbols and is disabled.
The &lt;code&gt;:sets&lt;/code&gt; group interferes with the &lt;code&gt;int&lt;/code&gt; symbol replacement for unknown
reasons. We redefine its symbols in prettify-symbols-mode later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;pretty-mode)
(global-pretty-mode t)

(pretty-deactivate-groups
 &#39;(:equality :ordering :ordering-double :ordering-triple
             :arrows :arrows-twoheaded :punctuation
             :logic :sets))

(pretty-activate-groups
 &#39;(:sub-and-superscripts :greek :arithmetic-nary))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commented symbols are not replaced, so &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; are fine within
docstrings and comments.&lt;/p&gt;

&lt;p&gt;The replacements are entirely visual - searching the buffer for &lt;code&gt;lambda&lt;/code&gt; will
find λ.&lt;/p&gt;

&lt;p&gt;Check &lt;code&gt;pretty-mode.el&lt;/code&gt; for the full list of groups, symbols and supported
modes.&lt;/p&gt;

&lt;h1 id=&#34;prettify-symbols-mode&#34;&gt;Prettify symbols mode&lt;/h1&gt;

&lt;p&gt;Prettify mode can be enabled by setting &lt;code&gt;(global-prettify-symbols-mode 1)&lt;/code&gt;. The
default replacements are major-mode specific. For python, &lt;code&gt;and&lt;/code&gt; goes to ∧, &lt;code&gt;or&lt;/code&gt;
goes to ∨, and &lt;code&gt;lambda&lt;/code&gt; goes to λ.&lt;/p&gt;

&lt;p&gt;Additional symbols can be added through &lt;code&gt;prettify-symbols-alist&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-prettify-symbols-mode 1)

(add-hook
 &#39;python-mode-hook
 (lambda ()
   (mapc (lambda (pair) (push pair prettify-symbols-alist))
         &#39;(;; Syntax
           (&amp;quot;def&amp;quot; .      #x2131)
           (&amp;quot;not&amp;quot; .      #x2757)
           (&amp;quot;in&amp;quot; .       #x2208)
           (&amp;quot;not in&amp;quot; .   #x2209)
           (&amp;quot;return&amp;quot; .   #x27fc)
           (&amp;quot;yield&amp;quot; .    #x27fb)
           (&amp;quot;for&amp;quot; .      #x2200)
           ;; Base Types
           (&amp;quot;int&amp;quot; .      #x2124)
           (&amp;quot;float&amp;quot; .    #x211d)
           (&amp;quot;str&amp;quot; .      #x1d54a)
           (&amp;quot;True&amp;quot; .     #x1d54b)
           (&amp;quot;False&amp;quot; .    #x1d53d)
           ;; Mypy
           (&amp;quot;Dict&amp;quot; .     #x1d507)
           (&amp;quot;List&amp;quot; .     #x2112)
           (&amp;quot;Tuple&amp;quot; .    #x2a02)
           (&amp;quot;Set&amp;quot; .      #x2126)
           (&amp;quot;Iterable&amp;quot; . #x1d50a)
           (&amp;quot;Any&amp;quot; .      #x2754)
           (&amp;quot;Union&amp;quot; .    #x22c3)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some changes are aggressive, mix and match codes to your taste.&lt;/p&gt;

&lt;p&gt;The command &lt;code&gt;insert-char&lt;/code&gt;, &lt;code&gt;C-x 8 RET&lt;/code&gt; prompts for Unicode characters by name
and inserts at point. There is also &lt;code&gt;describe-char&lt;/code&gt;, &lt;code&gt;M-m h d c&lt;/code&gt; which gives information on the character at point. Use in conjunction with eg. &lt;a href=&#34;https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode&#34;&gt;Math Unicode Symbols List&lt;/a&gt; to explore your options.&lt;/p&gt;

&lt;p&gt;You may encounter some Unicode symbols not rendering despite having a
containing font installed.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;(set-fontset-font &amp;quot;fontset-default&amp;quot; &#39;(#x1d4d0 . #x1d4e2) &amp;quot;Symbola&amp;quot;)&lt;/code&gt; to
force a font for particular characters. Here I&amp;rsquo;ve set &lt;code&gt;MATHEMATICAL BOLD SCRIPT
CAPITAL A/S&lt;/code&gt; to use &lt;code&gt;Symbola&lt;/code&gt;. You can check which fonts support which
characters &lt;a href=&#34;http://www.fileformat.info/info/unicode/index.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;ligatures&#34;&gt;Ligatures&lt;/h1&gt;

&lt;p&gt;UPDATE: The original implementation of ligatures for Emacs is no longer hosted.
&lt;a href=&#34;https://github.com/ekaschalk/.spacemacs.d/blob/master/layers/display/local/pretty-fonts/pretty-fonts.el&#34;&gt;Check out my package that implements fira code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable them, you need to add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(pretty-fonts-set-kwds
  &#39;((pretty-fonts-fira-font prog-mode-hook org-mode-hook)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ligatures require the FiraCodeSymbol font, not the entire fira code font.
Here is a link to the ligatures font to be installed: &lt;a href=&#34;https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip&#34;&gt;https://github.com/tonsky/FiraCode/files/412440/FiraCode-Regular-Symbol.zip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the asterisk ligatures can conflict with org-mode headers and others I
just did not like. I have disabled ligatures for
&lt;code&gt;#Xe101,102,103,104,105,109,12a,12b,14b,14c,16b&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;caveats&#34;&gt;Caveats&lt;/h1&gt;

&lt;p&gt;For ligatures, the number of visual points composing the replacement is the
same as its composing characters. For instance, the ligature for -&amp;gt; occupies
two spaces.&lt;/p&gt;

&lt;p&gt;But this is not the case for prettify-symbols or pretty-mode. Both &lt;code&gt;alpha&lt;/code&gt; and
&lt;code&gt;not in&lt;/code&gt; are reduced to one character.&lt;/p&gt;

&lt;p&gt;So the line width you see may not be the same as its actual width.&lt;/p&gt;

&lt;p&gt;This has two effects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A line could then exceed 80 characters with prettify-mode disabled.&lt;/li&gt;
&lt;li&gt;Indentation is performed using the &lt;em&gt;Unicode replacements&lt;/em&gt;, not actual
spacing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To circumvent these problems I would recommend:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using a linter like pylint which shows infractions for actual line width.&lt;/li&gt;
&lt;li&gt;A pre/post-processing hook that disables prettify, indents the buffer,
saves/exports/commits, then re-enables prettify and indents.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also only ligatures will export to html.&lt;/p&gt;

&lt;h1 id=&#34;my-experience&#34;&gt;My experience&lt;/h1&gt;

&lt;p&gt;I have found these changes to improve code readability significantly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I can instantly tell the exit points of a function and distinguish if it is
a generator.&lt;/li&gt;
&lt;li&gt;Logicals and comparisons are easy to parse. Similarly, distinguishing
between in and not in is now instantaneous.&lt;/li&gt;
&lt;li&gt;Lambdas are less cumbersome.&lt;/li&gt;
&lt;li&gt;Mypy types are debatably more natural to read as symbols.&lt;/li&gt;
&lt;li&gt;True, False, and None stand out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then there is subjective eye-candy considerations.&lt;/p&gt;

&lt;p&gt;Besides the discussed caveats, the main downside is the disassociation between
what you see and what you type. In my experience this has not been an issue and
the adjustment has been quick.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
