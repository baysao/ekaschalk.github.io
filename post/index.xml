<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Modern Emacs</title>
    <link>https://ekaschalk.github.io/post/</link>
    <description>Recent content in Posts on Modern Emacs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Eric Kaschalk</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pretty Magit - Integrating commit leaders</title>
      <link>https://ekaschalk.github.io/post/pretty-magit/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/pretty-magit/</guid>
      <description>&lt;p&gt;A comparison of how I see my commit logs and how they truly are:&lt;/p&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/magit-symbols.png&#34; alt=&#34;/img/spacemacs/magit-symbols.png&#34; title=&#34;/img/spacemacs/magit-symbols.png&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/magit-raw.png&#34; alt=&#34;/img/spacemacs/magit-raw.png&#34; title=&#34;/img/spacemacs/magit-raw.png&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Typically this would be accomplished with Emacs &lt;code&gt;font-lock-mode&lt;/code&gt;. However Magit
is magic, even trivial uses of &lt;code&gt;font-lock-add-keywords&lt;/code&gt; will break fontification
for the entire buffer.&lt;/p&gt;

&lt;p&gt;This post addresses adding faces to Magit to achieve in particular icon and
colored commit leaders. I also integrate Ivy/Helm to prompt a leader when
committing so you need not remember or type out completely every leader you
choose.&lt;/p&gt;

&lt;h1 id=&#34;adding-leaders&#34;&gt;Adding leaders&lt;/h1&gt;

&lt;p&gt;We cannot use font-locks so we compose the symbols and add the face text
properties ourselves.&lt;/p&gt;

&lt;p&gt;Users will interact with the macro &lt;code&gt;pretty-magit&lt;/code&gt; which takes a word such as
Fix, Add, and Docs, a unicode point to replace it with, a face attributes plist,
and optionally whether to exclude it from being added to the commit prompt.&lt;/p&gt;

&lt;dl&gt;
My personal choices for leaders are:
&lt;dt&gt;Add&lt;/dt&gt;
&lt;dd&gt;Any feature or update - check mark&lt;/dd&gt;
&lt;dt&gt;Fix&lt;/dt&gt;
&lt;dd&gt;Any bug fix - a bug&lt;/dd&gt;
&lt;dt&gt;Clean&lt;/dt&gt;
&lt;dd&gt;Any kind of refactoring - scissors&lt;/dd&gt;
&lt;dt&gt;Docs&lt;/dt&gt;
&lt;dd&gt;Documentation changes - info symbol&lt;/dd&gt;
&lt;dt&gt;Feature&lt;/dt&gt;
&lt;dd&gt;A milestone commit - flagpost&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;I also fontify origin and master with the github icon and branch icon
respectively, and exclude these from the commit prompts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;dash)

(defmacro pretty-magit (WORD ICON PROPS &amp;amp;optional NO-PROMPT?)
  &amp;quot;Replace sanitized WORD with ICON, PROPS and by default add to prompts.&amp;quot;
  `(prog1
     (add-to-list &#39;pretty-magit-alist
                  (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? &amp;quot;&amp;quot; &amp;quot;:&amp;quot;))))
                        ,ICON &#39;,PROPS))
     (unless ,NO-PROMPT?
       (add-to-list &#39;pretty-magit-prompt (concat ,WORD &amp;quot;: &amp;quot;)))))

(setq pretty-magit-alist nil)
(setq pretty-magit-prompt nil)
(pretty-magit &amp;quot;Feature&amp;quot; ? (:foreground &amp;quot;slate gray&amp;quot; :height 1.2))
(pretty-magit &amp;quot;Add&amp;quot;     ? (:foreground &amp;quot;#375E97&amp;quot; :height 1.2))
(pretty-magit &amp;quot;Fix&amp;quot;     ? (:foreground &amp;quot;#FB6542&amp;quot; :height 1.2))
(pretty-magit &amp;quot;Clean&amp;quot;   ? (:foreground &amp;quot;#FFBB00&amp;quot; :height 1.2))
(pretty-magit &amp;quot;Docs&amp;quot;    ? (:foreground &amp;quot;#3F681C&amp;quot; :height 1.2))
(pretty-magit &amp;quot;master&amp;quot;  ? (:box t :height 1.2) t)
(pretty-magit &amp;quot;origin&amp;quot;  ? (:box t :height 1.2) t)

(defun add-magit-faces ()
  &amp;quot;Add face properties and compose symbols for buffer from pretty-magit.&amp;quot;
  (interactive)
  (with-silent-modifications
    (--each pretty-magit-alist
      (-let (((rgx icon props) it))
        (save-excursion
          (goto-char (point-min))
          (while (search-forward-regexp rgx nil t)
            (compose-region
             (match-beginning 1) (match-end 1) icon)
            (when props
              (add-face-text-property
               (match-beginning 1) (match-end 1) props))))))))

(advice-add &#39;magit-status :after &#39;add-magit-faces)
(advice-add &#39;magit-refresh-buffer :after &#39;add-magit-faces)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&#39;ve tried about all the magit hooks and the only way to apply these updates are
with &lt;code&gt;advice-add&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;adding-ivy-or-helm&#34;&gt;Adding Ivy or Helm&lt;/h1&gt;

&lt;p&gt;Since this is Emacs, we can do better than typing out the leaders we&#39;ve chosen
each time we are committing. Here I present a solution with Ivy but Helm would
be little different.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;git-commit-setup-hook&lt;/code&gt; they provide has a delayed execution.
Magit&#39;s ammend, reword, and other commit bindings internally use that same hook.
However, it does not make sense to prompt a leader in those cases.
We can only distinguish a plain new commit by the call of &lt;code&gt;magit-commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With these observations, we must advise &lt;code&gt;magit-commit&lt;/code&gt; to let the hook know
whether to call the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(setq use-magit-commit-prompt-p nil)
(defun use-magit-commit-prompt (&amp;amp;rest args)
  (setq use-magit-commit-prompt-p t))

(defun magit-commit-prompt ()
  &amp;quot;Magit prompt and insert commit header with faces.&amp;quot;
  (interactive)
  (when use-magit-commit-prompt-p
    (setq use-magit-commit-prompt-p nil)
    (insert (ivy-read &amp;quot;Commit Type &amp;quot; pretty-magit-prompt
                      :require-match t :sort t :preselect &amp;quot;Add: &amp;quot;))
    ;; Or if you are using Helm...
    ;; (insert (helm :sources (helm-build-sync-source &amp;quot;Commit Type &amp;quot;
    ;;                          :candidates pretty-magit-prompt)
    ;;               :buffer &amp;quot;*magit cmt prompt*&amp;quot;))
    ;; I haven&#39;t tested this but should be simple to get the same behaior
    (add-magit-faces)
    (evil-insert 1)  ; If you use evil
    ))

(remove-hook &#39;git-commit-setup-hook &#39;with-editor-usage-message)
(add-hook &#39;git-commit-setup-hook &#39;magit-commit-prompt)
(advice-add &#39;magit-commit :after &#39;use-magit-commit-prompt)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/magit-prompt.png&#34; alt=&#34;/img/magit-prompt.png&#34; title=&#34;/img/magit-prompt.png&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;further&#34;&gt;Further&lt;/h1&gt;

&lt;p&gt;Beware of two very minor issues that I have not been able to resolve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you escape an ivy leader prompt, then next commit will skip the prompt and&lt;/li&gt;
   will work fine thereon. Avoid by just not escaping the prompt.
&lt;li&gt;In the commit messages, the insertion from the ivy prompt will be the right&lt;/li&gt;
   symbol, but lose its face properties when text is inserted. This is due to
   deep Magit propertize magic.
&lt;/ol&gt;

&lt;p&gt;There are many possible leaders, consider these options&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Add&lt;/dt&gt;
&lt;dd&gt;Create a capability e.g. feature, test, dependency.&lt;/dd&gt;
&lt;dt&gt;Cut&lt;/dt&gt;
&lt;dd&gt;Remove a capability e.g. feature, test, dependency.&lt;/dd&gt;
&lt;dt&gt;Fix&lt;/dt&gt;
&lt;dd&gt;Fix an issue e.g. bug, typo, accident, misstatement.&lt;/dd&gt;
&lt;dt&gt;Bump&lt;/dt&gt;
&lt;dd&gt;Increase the version of something e.g. dependency.&lt;/dd&gt;
&lt;dt&gt;Make&lt;/dt&gt;
&lt;dd&gt;Change the build process, or tooling, or infra.&lt;/dd&gt;
&lt;dt&gt;Start&lt;/dt&gt;
&lt;dd&gt;Begin doing something; e.g. create a feature flag.&lt;/dd&gt;
&lt;dt&gt;Stop&lt;/dt&gt;
&lt;dd&gt;End doing something; e.g. remove a feature flag.&lt;/dd&gt;
&lt;dt&gt;Refactor&lt;/dt&gt;
&lt;dd&gt;A code change that MUST be just a refactoring.&lt;/dd&gt;
&lt;dt&gt;Reformat&lt;/dt&gt;
&lt;dd&gt;Refactor of formatting, e.g. omit whitespace.&lt;/dd&gt;
&lt;dt&gt;Optimize&lt;/dt&gt;
&lt;dd&gt;Refactor of performance, e.g. speed up code.&lt;/dd&gt;
&lt;dt&gt;Document&lt;/dt&gt;
&lt;dd&gt;Refactor of documentation, e.g. help files.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Commit leader examples taken from from https://news.ycombinator.com/item?id=13889155. &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making eshell your own</title>
      <link>https://ekaschalk.github.io/post/custom-eshell/</link>
      <pubDate>Sat, 24 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/custom-eshell/</guid>
      <description>&lt;p&gt;I have written utilities for choosing what information, icons, and faces your
eshell prompt presents.&lt;/p&gt;

&lt;p&gt;Example eshell prompts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/esh-ex.png&#34; alt=&#34;/img/esh-ex.png&#34; title=&#34;/img/esh-ex.png&#34; /&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/esh-me.png&#34; alt=&#34;/img/esh-me.png&#34; title=&#34;/img/esh-me.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Eshell prompt customization takes place in &lt;code&gt;eshell-prompt-function&lt;/code&gt; and
 &lt;code&gt;eshell-prompt-regexp&lt;/code&gt;. The former determines the content of your prompt
while the latter distinguishes your commands.&lt;/p&gt;

&lt;p&gt;I define a macro &lt;code&gt;esh-section&lt;/code&gt; taking a name, an icon, a form or variable to be
evaluated, and optionally face properties. They create anonymous functions which
will be evaluated and concatenated at prompt-time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;dash)
(require &#39;s)

(defmacro with-face (STR &amp;amp;rest PROPS)
  &amp;quot;Return STR propertized with PROPS.&amp;quot;
  `(propertize ,STR &#39;face (list ,@PROPS)))

(defmacro esh-section (NAME ICON FORM &amp;amp;rest PROPS)
  &amp;quot;Build eshell section NAME with ICON prepended to evaled FORM with PROPS.&amp;quot;
  `(setq ,NAME
         (lambda () (when ,FORM
                      (-&amp;gt; ,ICON
                          (concat esh-section-delim ,FORM)
                          (with-face ,@PROPS))))))

(defun esh-acc (acc x)
  &amp;quot;Accumulator for evaluating and concatenating esh-sections.&amp;quot;
  (--if-let (funcall x)
      (if (s-blank? acc)
          it
        (concat acc esh-sep it))
    acc))

(defun esh-prompt-func ()
  &amp;quot;Build `eshell-prompt-function&#39;&amp;quot;
  (concat esh-header
          (-reduce-from &#39;esh-acc &amp;quot;&amp;quot; eshell-funcs)
          &amp;quot;\n&amp;quot;
          eshell-prompt-string))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets define the needed configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
;; Separator between esh-sections
(setq esh-sep &amp;quot;  &amp;quot;)  ; or &amp;quot; | &amp;quot;

;; Separator between an esh-section icon and form
(setq esh-section-delim &amp;quot; &amp;quot;)

;; Eshell prompt header
(setq esh-header &amp;quot;\n &amp;quot;)  ; or &amp;quot;\n┌─&amp;quot;

;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
;; your login, these can be the same.
(setq eshell-prompt-regexp &amp;quot; &amp;quot;)   ; or &amp;quot;└─&amp;gt; &amp;quot;
(setq eshell-prompt-string &amp;quot; &amp;quot;)   ; or &amp;quot;└─&amp;gt; &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are set to build some sections. A note, if a section&#39;s form returns nil,
then it will be skipped, so the effect of eg. python virtual environments will
only appear when you have an active venv.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(esh-section esh-dir
             &amp;quot;\xf07c&amp;quot;  ;  (faicon folder)
             (abbreviate-file-name (eshell/pwd))
             &#39;(:foreground &amp;quot;gold&amp;quot; :bold ultra-bold :underline t))

(esh-section esh-git
             &amp;quot;\xe907&amp;quot;  ;  (git icon)
             (magit-get-current-branch)
             &#39;(:foreground &amp;quot;pink&amp;quot;))

(esh-section esh-python
             &amp;quot;\xe928&amp;quot;  ;  (python icon)
             pyvenv-virtual-env-name)

(esh-section esh-clock
             &amp;quot;\xf017&amp;quot;  ;  (clock icon)
             (format-time-string &amp;quot;%H:%M&amp;quot; (current-time))
             &#39;(:foreground &amp;quot;forest green&amp;quot;))

;; Below I implement a &amp;quot;prompt number&amp;quot; section
(setq esh-prompt-num 0)
(add-hook &#39;eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
(advice-add &#39;eshell-send-input :before
            (lambda (&amp;amp;rest args) (setq esh-prompt-num (incf esh-prompt-num))))

(esh-section esh-num
             &amp;quot;\xf0c9&amp;quot;  ;  (list icon)
             (number-to-string esh-prompt-num)
             &#39;(:foreground &amp;quot;brown&amp;quot;))

;; Choose which eshell-funcs to enable
(setq eshell-funcs (list esh-dir esh-git esh-python esh-clock esh-num))

;; Enable the new eshell prompt
(setq eshell-prompt-function &#39;esh-prompt-func)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Further extensions to explore are predicate-based face application for eg.
distinguishing master and other branches and modeline-like foreground separation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/ekaschalk/f0ac91c406ad99e53bb97752683811a5&#34; title=&#34;I&#39;ve hosted the code altogether at this gist&#34;&gt;I&#39;ve hosted the code altogether at this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ekaschalk/dotspacemacs/blob/master/.spacemacs&#34; title=&#34;display/shell in my config&#34;&gt;display/shell in my config&lt;/a&gt; will host the most recent iteration and all my other
emacs tweaks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anonymous function macro in elisp</title>
      <link>https://ekaschalk.github.io/post/xi-macro/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/xi-macro/</guid>
      <description>&lt;p&gt;Clojure has anonymous functions with the reader macro &lt;code&gt;#(&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;
(#(print %2 %1) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emacs Lisp doesn&#39;t have reader macros, but we can take direction from Hylang, a
lisp dialect similar to Clojure inter-oping with Python.&lt;/p&gt;

&lt;p&gt;It implements the anonymous functions as the aptly named &lt;code&gt;xi&lt;/code&gt; macro, where the
lambda has arguments determined by presence of &lt;code&gt;x1 ... xi&lt;/code&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
((xi print x2 x1) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can implement the &lt;code&gt;xi&lt;/code&gt; macro in Emacs Lisp roughly as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;dash)
(require &#39;s)

(defmacro xi (&amp;amp;rest FORMS)
  `(lambda ,(--filter (s-contains? (symbol-name it)
                                   (prin1-to-string FORMS))
                      &#39;(x1 x2 x3 x4 x5))
     ,FORMS))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This enables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(funcall (xi print (concat x2 x1)) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
;; expands to
(funcall (lambda (x1 x2) (print (concat x2 x1))) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This implementation could be improved - the above example works with &lt;code&gt;(xi x3 x1)&lt;/code&gt;,
it doesn&#39;t actually validate that the xi are contiguous. It also doesn&#39;t cover
all numbers of arguments, though over 5 arguments would be questionable anyway.
Lastly it does not distinguish xis as part of say strings.&lt;/p&gt;

&lt;p&gt;This macro is especially useful for lambdas without arguments, like adding hooks
and keybindings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(add-hook &#39;eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
;; Becomes
(add-hook &#39;eshell-exit-hook (xi setq esh-prompt-num 0))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An Emacs Blogging Workflow</title>
      <link>https://ekaschalk.github.io/post/org-mode-blogging/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/org-mode-blogging/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt; is a static site generator. It natively supports org-mode, builds fast, and
has live reloading.&lt;/p&gt;

&lt;p&gt;I have two repos for &lt;a href=&#34;https://github.com/ekaschalk/blog&#34; title=&#34;blog content and settings&#34;&gt;blog content and settings&lt;/a&gt; and &lt;a href=&#34;https://github.com/ekaschalk/ekaschalk.github.io&#34; title=&#34;hugo output&#34;&gt;hugo output&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have defined some emacs lisp utilities to make interacting with Hugo easier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deploy-blog&lt;/code&gt; will goto your blog content, run &lt;code&gt;hugo&lt;/code&gt;, cleanup old html, and
push the updates.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;start-blog-server&lt;/code&gt; will run &lt;code&gt;hugo server&lt;/code&gt; if not already running, and open the
webpage in your browser.&lt;/p&gt;

&lt;p&gt;My blog workflow is then to startup the server (SPC a a), write some content in
org-mode and see it reflected in the browser on each save, and deploy (SPC a b).&lt;/p&gt;

&lt;p&gt;All the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;cl)
(require &#39;dash)

(setq blog-dir &amp;quot;~/dev/blog&amp;quot;
      public-blog-dir &amp;quot;~/dev/public-blog&amp;quot;
      hugo-process &amp;quot;Hugo Server&amp;quot;
      hugo-server-site &amp;quot;http://localhost:1313/&amp;quot;)

(defmacro with-dir (DIR &amp;amp;rest FORMS)
  &amp;quot;Execute FORMS in DIR.&amp;quot;
  (let ((orig-dir (gensym)))
    `(progn (setq ,orig-dir default-directory)
            (cd ,DIR) ,@FORMS (cd ,orig-dir))))

(defun deploy-blog ()
  &amp;quot;Run hugo and push changes upstream.&amp;quot;
  (interactive)
  (with-dir public-blog-dir
            (shell-command &amp;quot;git rm -rf .&amp;quot;)
            (shell-command &amp;quot;git clean -fxd&amp;quot;)

            (with-dir blog-dir (-&amp;gt;&amp;gt; public-blog-dir
                                    (concat &amp;quot;hugo -d &amp;quot;)
                                    shell-command))

            (shell-command &amp;quot;git add .&amp;quot;)
            (--&amp;gt; (current-time-string)
                 (concat &amp;quot;git commit -m \&amp;quot;&amp;quot; it &amp;quot;\&amp;quot;&amp;quot;)
                 (shell-command it))
            (magit-push-current-to-upstream nil)))

(defun start-blog-server ()
  &amp;quot;Run hugo server if not already running and open its webpage.&amp;quot;
  (interactive)
  (with-dir blog-dir
            (unless (get-process hugo-process)
              (start-process hugo-process nil &amp;quot;hugo&amp;quot; &amp;quot;server&amp;quot;))
            (browse-url hugo-server-site)))

(defun end-blog-server ()
  &amp;quot;End hugo server process if running.&amp;quot;
  (interactive)
  (--when-let (get-process hugo-process)
    (delete-process it)))

(spacemacs/set-leader-keys (kbd &amp;quot;ab&amp;quot;) &#39;deploy-blog)
(spacemacs/set-leader-keys (kbd &amp;quot;aa&amp;quot;) &#39;start-blog-server)
(spacemacs/set-leader-keys (kbd &amp;quot;ae&amp;quot;) &#39;end-blog-server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For reference, this blog post is an ordinary org file with just the headers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
#+TITLE: An Emacs Blogging Workflow
#+SLUG: org-mode-blogging
#+DATE: 2017-06-20
#+CATEGORIES: emacs org-mode
#+SUMMARY: Easy org-mode blogging with Hugo
#+DRAFT: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And hugo takes care of the rest.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unicode Python Infix Operators</title>
      <link>https://ekaschalk.github.io/post/python-infix/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/python-infix/</guid>
      <description>&lt;p&gt;Custom infix operators can be emulated in Python using &lt;strong&gt;prettify-symbols-mode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/python-infix.png&#34; width=700px&gt;&lt;/p&gt;
&lt;!-- [[file:/img/python-infix.png]] --&gt;

&lt;p&gt;In your emacs config include:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(global-prettify-symbols-mode 1)
(add-hook &#39;python-mode-hook
          (lambda ()
            (mapc (lambda (pair) (push pair prettify-symbols-alist))
                  &#39;((&amp;quot;@compose@&amp;quot;  . #X2218)
                    (&amp;quot;@pipe@&amp;quot;     . #Xe135)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;pip install infix&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Optionally &lt;code&gt;pip install toolz&lt;/code&gt;, a functional programming library, otherwise you
can define the infix operations yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import toolz.curried as tz
from infix import custom_infix as infix

@infix(&#39;__rmatmul__&#39;, &#39;__matmul__&#39;)
def compose(a, b):
    return tz.compose(a, b)

@infix(&#39;__rmatmul__&#39;, &#39;__matmul__&#39;)
def pipe(a, b):
    return tz.pipe(a, b)

[1, 2, 3] @pipe@ (tuple @compose@ tz.map(lambda x: x+1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other interesting functions - cons as &#39;:&#39; and concatv/itertools.chain as &#39;++&#39;.&lt;/p&gt;

&lt;p&gt;I do not recommend using this trick in production but it is certainly cool to see
emacs enabling these shenanigans.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mathematical Notation in Emacs</title>
      <link>https://ekaschalk.github.io/post/prettify-mode/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/prettify-mode/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/python-code.png&#34; /&gt;
&lt;img src=&#34;https://ekaschalk.github.io/img/spacemacs/hy-code.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sequences of characters are represented as a single token using:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Pretty-mode&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;https://github.com/akatov/pretty-mode&#34;&gt;Pretty-mode&lt;/a&gt; provides Greeks,
subscripts, and more symbols.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Prettify-symbols-mode&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;http://emacsredux.com/blog/2014/08/25/a-peek-at-emacs-24-dot-4-prettify-symbols-mode/&#34;&gt;Prettify
Symbols&lt;/a&gt;
ships with Emacs as of 24.4 and adds support for custom Unicode replacement
of symbols.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Ligatures&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Unicode replacements of common operators (see &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira
Code&lt;/a&gt;, the font I use, and &lt;a href=&#34;https://github.com/fabrizioschiavi/pragmatapro&#34;&gt;Pragmata
Pro&lt;/a&gt; fonts)&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Any combination of these tools may be chosen; Fira Code is not required to
utilize prettify-symbols or pretty-mode. Similarly, the entire Fira Code
font is not required to use Fira&amp;rsquo;s ligatures.&lt;/p&gt;

&lt;p&gt;The replacements are purely visual - searching for &amp;ldquo;for&amp;rdquo; will find the for all symbol.&lt;/p&gt;

&lt;h1 id=&#34;pretty-mode&#34;&gt;Pretty mode&lt;/h1&gt;

&lt;p&gt;The package &lt;a href=&#34;https://github.com/akatov/pretty-mode&#34;&gt;pretty-mode&lt;/a&gt; provides
default symbol replacements including in, not in, and, or, and greek letters.&lt;/p&gt;

&lt;p&gt;Overlap with Fira Code operators can be handled by deactivating the operator,
equality, and arrow groups. Sub/superscripts, greek letters, and the sigma
summation must be manually activated.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;:logic&lt;/code&gt; group overlaps/interferes with prettify-symbols and is disabled.
The &lt;code&gt;:sets&lt;/code&gt; group interferes with the &lt;code&gt;int&lt;/code&gt; symbol replacement for unknown
reasons. We redefine its symbols in prettify-symbols-mode later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;pretty-mode)
(global-pretty-mode t)

(pretty-deactivate-groups
 &#39;(:equality :ordering :ordering-double :ordering-triple
             :arrows :arrows-twoheaded :punctuation
             :logic :sets))

(pretty-activate-groups
 &#39;(:sub-and-superscripts :greek :arithmetic-nary))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commented symbols are not replaced, so &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; are fine within
docstrings and comments.&lt;/p&gt;

&lt;p&gt;The replacements are entirely visual - searching the buffer for &lt;code&gt;lambda&lt;/code&gt; will
find λ.&lt;/p&gt;

&lt;p&gt;Check &lt;code&gt;pretty-mode.el&lt;/code&gt; for the full list of groups, symbols and supported
modes.&lt;/p&gt;

&lt;h1 id=&#34;prettify-symbols-mode&#34;&gt;Prettify symbols mode&lt;/h1&gt;

&lt;p&gt;Prettify mode can be enabled by setting &lt;code&gt;(global-prettify-symbols-mode 1)&lt;/code&gt;. The
default replacements are major-mode specific. For python, &lt;code&gt;and&lt;/code&gt; goes to ∧, &lt;code&gt;or&lt;/code&gt;
goes to ∨, and &lt;code&gt;lambda&lt;/code&gt; goes to λ.&lt;/p&gt;

&lt;p&gt;Additional symbols can be added through &lt;code&gt;prettify-symbols-alist&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-prettify-symbols-mode 1)

(add-hook
 &#39;python-mode-hook
 (lambda ()
   (mapc (lambda (pair) (push pair prettify-symbols-alist))
         &#39;(;; Syntax
           (&amp;quot;def&amp;quot; .      #x2131)
           (&amp;quot;not&amp;quot; .      #x2757)
           (&amp;quot;in&amp;quot; .       #x2208)
           (&amp;quot;not in&amp;quot; .   #x2209)
           (&amp;quot;return&amp;quot; .   #x27fc)
           (&amp;quot;yield&amp;quot; .    #x27fb)
           (&amp;quot;for&amp;quot; .      #x2200)
           ;; Base Types
           (&amp;quot;int&amp;quot; .      #x2124)
           (&amp;quot;float&amp;quot; .    #x211d)
           (&amp;quot;str&amp;quot; .      #x1d54a)
           (&amp;quot;True&amp;quot; .     #x1d54b)
           (&amp;quot;False&amp;quot; .    #x1d53d)
           ;; Mypy
           (&amp;quot;Dict&amp;quot; .     #x1d507)
           (&amp;quot;List&amp;quot; .     #x2112)
           (&amp;quot;Tuple&amp;quot; .    #x2a02)
           (&amp;quot;Set&amp;quot; .      #x2126)
           (&amp;quot;Iterable&amp;quot; . #x1d50a)
           (&amp;quot;Any&amp;quot; .      #x2754)
           (&amp;quot;Union&amp;quot; .    #x22c3)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some changes are aggressive, mix and match codes to your taste.&lt;/p&gt;

&lt;p&gt;The command &lt;code&gt;insert-char&lt;/code&gt;, &lt;code&gt;C-x 8 RET&lt;/code&gt; prompts for Unicode characters by name
and inserts at point. There is also &lt;code&gt;describe-char&lt;/code&gt;, &lt;code&gt;M-m h d c&lt;/code&gt; which gives information on the character at point. Use in conjunction with eg. &lt;a href=&#34;https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode&#34;&gt;Math Unicode Symbols List&lt;/a&gt; to explore your options.&lt;/p&gt;

&lt;p&gt;You may encounter some Unicode symbols not rendering despite having a
containing font installed.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;(set-fontset-font &amp;quot;fontset-default&amp;quot; &#39;(#x1d4d0 . #x1d4e2) &amp;quot;Symbola&amp;quot;)&lt;/code&gt; to
force a font for particular characters. Here I&amp;rsquo;ve set &lt;code&gt;MATHEMATICAL BOLD SCRIPT
CAPITAL A/S&lt;/code&gt; to use &lt;code&gt;Symbola&lt;/code&gt;. You can check which fonts support which
characters &lt;a href=&#34;http://www.fileformat.info/info/unicode/index.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;ligatures&#34;&gt;Ligatures&lt;/h1&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; font for examples and
installation. &lt;a href=&#34;https://gist.github.com/mordocai/50783defab3c3d1650e068b4d1c91495&#34;&gt;This
snippet&lt;/a&gt;
must go into your config. Make sure you install the &lt;code&gt;Fira Code Symbol font&lt;/code&gt;
linked at the top of the gist &lt;em&gt;in addition&lt;/em&gt; to the fonts linked on the Github.
The gist should work for both Linux and Windows.&lt;/p&gt;

&lt;p&gt;Some of the asterisk ligatures can conflict with org-mode headers and others I
just did not like. I have disabled ligatures for
&lt;code&gt;#Xe101,102,103,104,105,109,12a,12b,14b,14c,16b&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;caveats&#34;&gt;Caveats&lt;/h1&gt;

&lt;p&gt;For ligatures, the number of visual points composing the replacement is the
same as its composing characters. For instance, the ligature for -&amp;gt; occupies
two spaces.&lt;/p&gt;

&lt;p&gt;But this is not the case for prettify-symbols or pretty-mode. Both &lt;code&gt;alpha&lt;/code&gt; and
&lt;code&gt;not in&lt;/code&gt; are reduced to one character.&lt;/p&gt;

&lt;p&gt;So the line width you see may not be the same as its actual width.&lt;/p&gt;

&lt;p&gt;This has two effects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A line could then exceed 80 characters with prettify-mode disabled.&lt;/li&gt;
&lt;li&gt;Indentation is performed using the &lt;em&gt;Unicode replacements&lt;/em&gt;, not actual
spacing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To circumvent these problems I would recommend:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using a linter like pylint which shows infractions for actual line width.&lt;/li&gt;
&lt;li&gt;A pre/post-processing hook that disables prettify, indents the buffer,
saves/exports/commits, then re-enables prettify and indents.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also only ligatures will export to html.&lt;/p&gt;

&lt;h1 id=&#34;my-experience&#34;&gt;My experience&lt;/h1&gt;

&lt;p&gt;I have found these changes to improve code readability significantly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I can instantly tell the exit points of a function and distinguish if it is
a generator.&lt;/li&gt;
&lt;li&gt;Logicals and comparisons are easy to parse. Similarly, distinguishing
between in and not in is now instantaneous.&lt;/li&gt;
&lt;li&gt;Lambdas are less cumbersome.&lt;/li&gt;
&lt;li&gt;Mypy types are debatably more natural to read as symbols.&lt;/li&gt;
&lt;li&gt;True, False, and None stand out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then there is subjective eye-candy considerations.&lt;/p&gt;

&lt;p&gt;Besides the discussed caveats, the main downside is the disassociation between
what you see and what you type. In my experience this has not been an issue and
the adjustment has been quick.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
