<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modern Emacs on Modern Emacs</title>
    <link>https://ekaschalk.github.io/</link>
    <description>Recent content in Modern Emacs on Modern Emacs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Eric Kaschalk</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Anonymous function macro in elisp</title>
      <link>https://ekaschalk.github.io/post/xi-macro/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/xi-macro/</guid>
      <description>&lt;p&gt;Clojure has anonymous functions with the reader macro &lt;code&gt;#(&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;
(#(print %2 %1) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emacs Lisp doesn&#39;t have reader macros, but we can take direction from Hylang, a
lisp dialect similar to Clojure inter-oping with Python.&lt;/p&gt;

&lt;p&gt;It implements the anonymous functions as the aptly named &lt;code&gt;xi&lt;/code&gt; macro, where the
lambda has arguments determined by presence of &lt;code&gt;x1 ... xi&lt;/code&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
((xi print x2 x1) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can implement the &lt;code&gt;xi&lt;/code&gt; macro in Emacs Lisp roughly as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;dash)
(require &#39;s)

(defmacro xi (&amp;amp;rest FORMS)
  `(lambda ,(--filter (s-contains? (symbol-name it)
                                   (prin1-to-string FORMS))
                      &#39;(x1 x2 x3 x4 x5))
     ,FORMS))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This enables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(funcall (xi print (concat x2 x1)) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
;; expands to
(funcall (lambda (x1 x2) (print (concat x2 x1))) &amp;quot;there&amp;quot; &amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This implementation could be improved - the above example works with &lt;code&gt;(xi x3 x1)&lt;/code&gt;,
it doesn&#39;t actually validate that the xi are contiguous. It also doesn&#39;t cover
all numbers of arguments, though over 5 arguments would be questionable anyway.&lt;/p&gt;

&lt;p&gt;This macro is especially useful for lambdas without arguments, like adding hooks
and keybindings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(add-hook &#39;eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
;; Becomes
(add-hook &#39;eshell-exit-hook (xi setq esh-prompt-num 0))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An Emacs Blogging Workflow</title>
      <link>https://ekaschalk.github.io/post/org-mode-blogging/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/org-mode-blogging/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt; is a static site generator. It natively supports org-mode, builds fast, and
has live reloading.&lt;/p&gt;

&lt;p&gt;I have two repos for &lt;a href=&#34;https://github.com/ekaschalk/blog&#34; title=&#34;blog content and settings&#34;&gt;blog content and settings&lt;/a&gt; and &lt;a href=&#34;https://github.com/ekaschalk/ekaschalk.github.io&#34; title=&#34;hugo output&#34;&gt;hugo output&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have defined some emacs lisp utilities to make interacting with Hugo easier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;deploy-blog&lt;/code&gt; will goto your blog content, run &lt;code&gt;hugo&lt;/code&gt;, cleanup old html, and
push the updates.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;start-blog-server&lt;/code&gt; will run &lt;code&gt;hugo server&lt;/code&gt; if not already running, and open the
webpage in your browser.&lt;/p&gt;

&lt;p&gt;My blog workflow is then to startup the server (SPC a a), write some content in
org-mode and see it reflected in the browser on each save, and deploy (SPC a b).&lt;/p&gt;

&lt;p&gt;All the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(require &#39;cl)
(require &#39;dash)

(setq blog-dir &amp;quot;~/dev/blog&amp;quot;
      public-blog-dir &amp;quot;~/dev/public-blog&amp;quot;
      hugo-process &amp;quot;Hugo Server&amp;quot;
      hugo-server-site &amp;quot;http://localhost:1313/&amp;quot;)

(defmacro with-dir (DIR &amp;amp;rest FORMS)
  &amp;quot;Execute FORMS in DIR.&amp;quot;
  (let ((orig-dir (gensym)))
    `(progn (setq ,orig-dir default-directory)
            (cd ,DIR) ,@FORMS (cd ,orig-dir))))

(defun deploy-blog ()
  &amp;quot;Run hugo and push changes upstream.&amp;quot;
  (interactive)
  (with-dir public-blog-dir
            (shell-command &amp;quot;git rm -rf .&amp;quot;)
            (shell-command &amp;quot;git clean -fxd&amp;quot;)

            (with-dir blog-dir (-&amp;gt;&amp;gt; public-blog-dir
                                    (concat &amp;quot;hugo -d &amp;quot;)
                                    shell-command))

            (shell-command &amp;quot;git add .&amp;quot;)
            (--&amp;gt; (current-time-string)
                 (concat &amp;quot;git commit -m \&amp;quot;&amp;quot; it &amp;quot;\&amp;quot;&amp;quot;)
                 (shell-command it))
            (magit-push-current-to-upstream nil)))

(defun start-blog-server ()
  &amp;quot;Run hugo server if not already running and open its webpage.&amp;quot;
  (interactive)
  (with-dir blog-dir
            (unless (get-process hugo-process)
              (start-process hugo-process nil &amp;quot;hugo&amp;quot; &amp;quot;server&amp;quot;))
            (browse-url hugo-server-site)))

(defun end-blog-server ()
  &amp;quot;End hugo server process if running.&amp;quot;
  (interactive)
  (--when-let (get-process hugo-process)
    (delete-process it)))

(spacemacs/set-leader-keys (kbd &amp;quot;ab&amp;quot;) &#39;deploy-blog)
(spacemacs/set-leader-keys (kbd &amp;quot;aa&amp;quot;) &#39;start-blog-server)
(spacemacs/set-leader-keys (kbd &amp;quot;ae&amp;quot;) &#39;end-blog-server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For reference, this blog post is an ordinary org file with just the headers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-org&#34;&gt;
#+TITLE: An Emacs Blogging Workflow
#+SLUG: org-mode-blogging
#+DATE: 2017-06-20
#+CATEGORIES: emacs org-mode
#+SUMMARY: Easy org-mode blogging with Hugo
#+DRAFT: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And hugo takes care of the rest.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unicode Python Infix Operators</title>
      <link>https://ekaschalk.github.io/post/python-infix/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/python-infix/</guid>
      <description>&lt;p&gt;Custom infix operators can be emulated in Python using &lt;strong&gt;prettify-symbols-mode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/python-infix.png&#34; width=700px&gt;&lt;/p&gt;
&lt;!-- [[file:/img/python-infix.png]] --&gt;

&lt;p&gt;In your emacs config include:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;
(global-prettify-symbols-mode 1)
(add-hook &#39;python-mode-hook
          (lambda ()
            (mapc (lambda (pair) (push pair prettify-symbols-alist))
                  &#39;((&amp;quot;@compose@&amp;quot;  . #X2218)
                    (&amp;quot;@pipe@&amp;quot;     . #Xe135)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;pip install infix&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Optionally &lt;code&gt;pip install toolz&lt;/code&gt;, a functional programming library, otherwise you
can define the infix operations yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import toolz.curried as tz
from infix import custom_infix as infix

@infix(&#39;__rmatmul__&#39;, &#39;__matmul__&#39;)
def compose(a, b):
    return tz.compose(a, b)

@infix(&#39;__rmatmul__&#39;, &#39;__matmul__&#39;)
def pipe(a, b):
    return tz.pipe(a, b)

[1, 2, 3] @pipe@ (tuple @compose@ tz.map(lambda x: x+1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other interesting functions - cons as &#39;:&#39; and concatv/itertools.chain as &#39;++&#39;.&lt;/p&gt;

&lt;p&gt;I do not recommend using this trick in production but it is certainly cool to see
emacs enabling these shenanigans.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mathematical Notation in Emacs</title>
      <link>https://ekaschalk.github.io/post/prettify-mode/</link>
      <pubDate>Sun, 19 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ekaschalk.github.io/post/prettify-mode/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://ekaschalk.github.io/img/prettify-mode.png&#34; width=&#34;660&#34; height=&#34;830&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sequences of characters are represented as a single token using:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Pretty-mode&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;https://github.com/akatov/pretty-mode&#34;&gt;Pretty-mode&lt;/a&gt; provides Greeks,
subscripts, and more symbols.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Prettify-symbols-mode&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href=&#34;http://emacsredux.com/blog/2014/08/25/a-peek-at-emacs-24-dot-4-prettify-symbols-mode/&#34;&gt;Prettify
Symbols&lt;/a&gt;
ships with Emacs as of 24.4 and adds support for custom Unicode replacement
of symbols.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Ligatures&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Unicode replacements of common operators (see &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira
Code&lt;/a&gt;, the font I use, and &lt;a href=&#34;https://github.com/fabrizioschiavi/pragmatapro&#34;&gt;Pragmata
Pro&lt;/a&gt; fonts)&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Any combination of these tools may be chosen; Fira Code is not required to
utilize prettify-symbols or pretty-mode. Similarly, the entire Fira Code
font is not required to use Fira&amp;rsquo;s ligatures.&lt;/p&gt;

&lt;p&gt;The replacements are purely visual - searching for &amp;ldquo;for&amp;rdquo; will find the for all symbol.&lt;/p&gt;

&lt;h1 id=&#34;pretty-mode&#34;&gt;Pretty mode&lt;/h1&gt;

&lt;p&gt;The package &lt;a href=&#34;https://github.com/akatov/pretty-mode&#34;&gt;pretty-mode&lt;/a&gt; provides
default symbol replacements including in, not in, and, or, and greek letters.&lt;/p&gt;

&lt;p&gt;Overlap with Fira Code operators can be handled by deactivating the operator,
equality, and arrow groups. Sub/superscripts, greek letters, and the sigma
summation must be manually activated.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;:logic&lt;/code&gt; group overlaps/interferes with prettify-symbols and is disabled.
The &lt;code&gt;:sets&lt;/code&gt; group interferes with the &lt;code&gt;int&lt;/code&gt; symbol replacement for unknown
reasons. We redefine its symbols in prettify-symbols-mode later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(require &#39;pretty-mode)
(global-pretty-mode t)

(pretty-deactivate-groups
 &#39;(:equality :ordering :ordering-double :ordering-triple
             :arrows :arrows-twoheaded :punctuation
             :logic :sets))

(pretty-activate-groups
 &#39;(:sub-and-superscripts :greek :arithmetic-nary))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commented symbols are not replaced, so &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; are fine within
docstrings and comments.&lt;/p&gt;

&lt;p&gt;The replacements are entirely visual - searching the buffer for &lt;code&gt;lambda&lt;/code&gt; will
find λ.&lt;/p&gt;

&lt;p&gt;Check &lt;code&gt;pretty-mode.el&lt;/code&gt; for the full list of groups, symbols and supported
modes.&lt;/p&gt;

&lt;h1 id=&#34;prettify-symbols-mode&#34;&gt;Prettify symbols mode&lt;/h1&gt;

&lt;p&gt;Prettify mode can be enabled by setting &lt;code&gt;(global-prettify-symbols-mode 1)&lt;/code&gt;. The
default replacements are major-mode specific. For python, &lt;code&gt;and&lt;/code&gt; goes to ∧, &lt;code&gt;or&lt;/code&gt;
goes to ∨, and &lt;code&gt;lambda&lt;/code&gt; goes to λ.&lt;/p&gt;

&lt;p&gt;Additional symbols can be added through &lt;code&gt;prettify-symbols-alist&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(global-prettify-symbols-mode 1)

(add-hook
 &#39;python-mode-hook
 (lambda ()
   (mapc (lambda (pair) (push pair prettify-symbols-alist))
         &#39;(;; Syntax
           (&amp;quot;def&amp;quot; .      #x2131)
           (&amp;quot;not&amp;quot; .      #x2757)
           (&amp;quot;in&amp;quot; .       #x2208)
           (&amp;quot;not in&amp;quot; .   #x2209)
           (&amp;quot;return&amp;quot; .   #x27fc)
           (&amp;quot;yield&amp;quot; .    #x27fb)
           (&amp;quot;for&amp;quot; .      #x2200)
           ;; Base Types
           (&amp;quot;int&amp;quot; .      #x2124)
           (&amp;quot;float&amp;quot; .    #x211d)
           (&amp;quot;str&amp;quot; .      #x1d54a)
           (&amp;quot;True&amp;quot; .     #x1d54b)
           (&amp;quot;False&amp;quot; .    #x1d53d)
           ;; Mypy
           (&amp;quot;Dict&amp;quot; .     #x1d507)
           (&amp;quot;List&amp;quot; .     #x2112)
           (&amp;quot;Tuple&amp;quot; .    #x2a02)
           (&amp;quot;Set&amp;quot; .      #x2126)
           (&amp;quot;Iterable&amp;quot; . #x1d50a)
           (&amp;quot;Any&amp;quot; .      #x2754)
           (&amp;quot;Union&amp;quot; .    #x22c3)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some changes are aggressive, mix and match codes to your taste.&lt;/p&gt;

&lt;p&gt;The command &lt;code&gt;insert-char&lt;/code&gt;, &lt;code&gt;C-x 8 RET&lt;/code&gt; prompts for Unicode characters by name
and inserts at point. There is also &lt;code&gt;describe-char&lt;/code&gt;, &lt;code&gt;M-m h d c&lt;/code&gt; which gives information on the character at point. Use in conjunction with eg. &lt;a href=&#34;https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode&#34;&gt;Math Unicode Symbols List&lt;/a&gt; to explore your options.&lt;/p&gt;

&lt;p&gt;You may encounter some Unicode symbols not rendering despite having a
containing font installed.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;(set-fontset-font &amp;quot;fontset-default&amp;quot; &#39;(#x1d4d0 . #x1d4e2) &amp;quot;Symbola&amp;quot;)&lt;/code&gt; to
force a font for particular characters. Here I&amp;rsquo;ve set &lt;code&gt;MATHEMATICAL BOLD SCRIPT
CAPITAL A/S&lt;/code&gt; to use &lt;code&gt;Symbola&lt;/code&gt;. You can check which fonts support which
characters &lt;a href=&#34;http://www.fileformat.info/info/unicode/index.htm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;ligatures&#34;&gt;Ligatures&lt;/h1&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt; font for examples and
installation. &lt;a href=&#34;https://gist.github.com/mordocai/50783defab3c3d1650e068b4d1c91495&#34;&gt;This
snippet&lt;/a&gt;
must go into your config. Make sure you install the &lt;code&gt;Fira Code Symbol font&lt;/code&gt;
linked at the top of the gist &lt;em&gt;in addition&lt;/em&gt; to the fonts linked on the Github.
The gist should work for both Linux and Windows.&lt;/p&gt;

&lt;p&gt;Some of the asterisk ligatures can conflict with org-mode headers and others I
just did not like. I have disabled ligatures for
&lt;code&gt;#Xe101,102,103,104,105,109,12a,12b,14b,14c,16b&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;caveats&#34;&gt;Caveats&lt;/h1&gt;

&lt;p&gt;For ligatures, the number of visual points composing the replacement is the
same as its composing characters. For instance, the ligature for -&amp;gt; occupies
two spaces.&lt;/p&gt;

&lt;p&gt;But this is not the case for prettify-symbols or pretty-mode. Both &lt;code&gt;alpha&lt;/code&gt; and
&lt;code&gt;not in&lt;/code&gt; are reduced to one character.&lt;/p&gt;

&lt;p&gt;So the line width you see may not be the same as its actual width.&lt;/p&gt;

&lt;p&gt;This has two effects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A line could then exceed 80 characters with prettify-mode disabled.&lt;/li&gt;
&lt;li&gt;Indentation is performed using the &lt;em&gt;Unicode replacements&lt;/em&gt;, not actual
spacing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To circumvent these problems I would recommend:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using a linter like pylint which shows infractions for actual line width.&lt;/li&gt;
&lt;li&gt;A pre/post-processing hook that disables prettify, indents the buffer,
saves/exports/commits, then re-enables prettify and indents.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also only ligatures will export to html.&lt;/p&gt;

&lt;h1 id=&#34;my-experience&#34;&gt;My experience&lt;/h1&gt;

&lt;p&gt;I have found these changes to improve code readability significantly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I can instantly tell the exit points of a function and distinguish if it is
a generator.&lt;/li&gt;
&lt;li&gt;Logicals and comparisons are easy to parse. Similarly, distinguishing
between in and not in is now instantaneous.&lt;/li&gt;
&lt;li&gt;Lambdas are less cumbersome.&lt;/li&gt;
&lt;li&gt;Mypy types are debatably more natural to read as symbols.&lt;/li&gt;
&lt;li&gt;True, False, and None stand out.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then there is subjective eye-candy considerations.&lt;/p&gt;

&lt;p&gt;Besides the discussed caveats, the main downside is the disassociation between
what you see and what you type. In my experience this has not been an issue and
the adjustment has been quick.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
